{
  "item": [
    {
      "id": "54663b58-b238-4910-adcc-0499440bfed3",
      "name": "Creates a model response for the given chat conversation.",
      "request": {
        "name": "Creates a model response for the given chat conversation.",
        "description": {},
        "url": {
          "path": [
            "chat",
            "completions"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": \"{{messages}}\",\n    \"frequency_penalty\": \"{{frequency_penalty}}\",\n    \"logit_bias\": null,\n    \"logprobs\": false,\n    \"top_logprobs\": \"{{top_logprobs}}\",\n    \"max_tokens\": \"{{max_tokens}}\",\n    \"n\": \"{{n}}\",\n    \"presence_penalty\": \"{{presence_penalty}}\",\n    \"response_format\": {\n        \"type\": \"{{type}}\"\n    },\n    \"seed\": \"{{seed}}\",\n    \"stop\": \"{{stop}}\",\n    \"stream\": false,\n    \"temperature\": \"{{temperature}}\",\n    \"top_p\": \"{{top_p}}\",\n    \"tools\": \"{{tools}}\",\n    \"tool_choice\": \"{{tool_choice}}\",\n    \"user\": \"{{user}}\",\n    \"function_call\": \"{{function_call}}\",\n    \"functions\": \"{{functions}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "24ec183b-53d3-4092-a9b6-9285fed6c1d6",
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "chat",
                "completions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"model\": \"{{model}}\",\n    \"messages\": \"{{messages}}\",\n    \"frequency_penalty\": \"{{frequency_penalty}}\",\n    \"logit_bias\": null,\n    \"logprobs\": false,\n    \"top_logprobs\": \"{{top_logprobs}}\",\n    \"max_tokens\": \"{{max_tokens}}\",\n    \"n\": \"{{n}}\",\n    \"presence_penalty\": \"{{presence_penalty}}\",\n    \"response_format\": {\n        \"type\": \"{{type}}\"\n    },\n    \"seed\": \"{{seed}}\",\n    \"stop\": \"{{stop}}\",\n    \"stream\": false,\n    \"temperature\": \"{{temperature}}\",\n    \"top_p\": \"{{top_p}}\",\n    \"tools\": \"{{tools}}\",\n    \"tool_choice\": \"{{tool_choice}}\",\n    \"user\": \"{{user}}\",\n    \"function_call\": \"{{function_call}}\",\n    \"functions\": \"{{functions}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"choices\": [\n    {\n      \"finish_reason\": \"length\",\n      \"index\": 15754931,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"commodo dolor sit sint voluptate\",\n        \"tool_calls\": [\n          {\n            \"id\": \"non fugiat reprehenderit\",\n            \"type\": \"function\",\n            \"function\": {\n              \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"arguments\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          },\n          {\n            \"id\": \"sunt fugiat\",\n            \"type\": \"function\",\n            \"function\": {\n              \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"arguments\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          }\n        ],\n        \"function_call\": {\n          \"name\": \"quis pariatur commodo\",\n          \"arguments\": \"sunt nostrud sin\"\n        }\n      },\n      \"logprobs\": {\n        \"content\": [\n          {\n            \"token\": \"labore cupidatat\",\n            \"logprob\": 93645945.3959372,\n            \"bytes\": [\n              44707735,\n              -63700770\n            ],\n            \"top_logprobs\": [\n              {\n                \"token\": \"ea velit magna nulla ut\",\n                \"logprob\": -13095696.226236656,\n                \"bytes\": [\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  },\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  }\n                ]\n              },\n              {\n                \"token\": \"velit incididunt consequat ullamco\",\n                \"logprob\": 59943987.483106196,\n                \"bytes\": [\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  },\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"token\": \"id officia ea\",\n            \"logprob\": 39272966.1539256,\n            \"bytes\": [\n              79787148,\n              -47407139\n            ],\n            \"top_logprobs\": [\n              {\n                \"token\": \"exercitation cupidatat\",\n                \"logprob\": 32437007.40355657,\n                \"bytes\": [\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  },\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  }\n                ]\n              },\n              {\n                \"token\": \"Ut aute\",\n                \"logprob\": 20146602.694624424,\n                \"bytes\": [\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  },\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"finish_reason\": \"tool_calls\",\n      \"index\": 26226683,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"proident in\",\n        \"tool_calls\": [\n          {\n            \"id\": \"consequat ut\",\n            \"type\": \"function\",\n            \"function\": {\n              \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"arguments\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          },\n          {\n            \"id\": \"sit\",\n            \"type\": \"function\",\n            \"function\": {\n              \"name\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              },\n              \"arguments\": {\n                \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n              }\n            }\n          }\n        ],\n        \"function_call\": {\n          \"name\": \"est ut\",\n          \"arguments\": \"ad pariatur\"\n        }\n      },\n      \"logprobs\": {\n        \"content\": [\n          {\n            \"token\": \"nostrud elit anim do\",\n            \"logprob\": 39708204.68591586,\n            \"bytes\": [\n              97866851,\n              49117754\n            ],\n            \"top_logprobs\": [\n              {\n                \"token\": \"ut qui officia reprehenderit\",\n                \"logprob\": -81850314.58973442,\n                \"bytes\": [\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  },\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  }\n                ]\n              },\n              {\n                \"token\": \"dolor\",\n                \"logprob\": -46727707.74586841,\n                \"bytes\": [\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  },\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            \"token\": \"nostrud\",\n            \"logprob\": -84674007.6830657,\n            \"bytes\": [\n              82972773,\n              -71817743\n            ],\n            \"top_logprobs\": [\n              {\n                \"token\": \"adipisicing Excepteur pariatur aute\",\n                \"logprob\": -77698843.70061794,\n                \"bytes\": [\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  },\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  }\n                ]\n              },\n              {\n                \"token\": \"quis \",\n                \"logprob\": -78536114.33647689,\n                \"bytes\": [\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  },\n                  {\n                    \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ],\n  \"created\": 64330679,\n  \"id\": \"et voluptate\",\n  \"model\": \"nostrud culpa\",\n  \"object\": \"chat.completion\",\n  \"system_fingerprint\": \"labore esse\",\n  \"usage\": {\n    \"prompt_tokens\": -66994547,\n    \"completion_tokens\": -34502977,\n    \"total_tokens\": -12114137\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /chat/completions for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `choices` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`choices`)){\n              if(pm.expect(_.get(responseData[0], `choices`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `choices` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`choices`)){\n              if(pm.expect(_.get(pm.response.json(), `choices`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the choices field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`choices`);\n          let choicesArray = _.get(pm.response.json(), `choices`, \"\");\n          for (let choices_it = 0; choices_it < choicesArray.length; choices_it++) {\n            let iterator = choices_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'finish_reason' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].finish_reason`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].finish_reason`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].finish_reason' has 'finish_reason' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].finish_reason`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].finish_reason`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('choices[${choices_it}].finish_reason to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"choices[${choices_it}].finish_reason\", \"\")).to.include.oneOf([\"stop\",\"length\",\"tool_calls\",\"content_filter\",\"function_call\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'choicesArray'has 'index' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].index`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].index`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'choicesArray'has 'index' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].index`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].index`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'message' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message' has 'message' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'content' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.content`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.content`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.content' has 'content' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.content`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.content`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'choicesArray' has 'tool_calls' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.tool_calls`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].message.tool_calls`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'choicesArray' has 'tool_calls' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.tool_calls`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].message.tool_calls`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the choices[${choices_it}].message.tool_calls field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`choices[${choices_it}].message.tool_calls`);\n          let tool_callsArray = _.get(pm.response.json(), `choices[${choices_it}].message.tool_calls`, \"\");\n          for (let tool_calls_it = 0; tool_calls_it < tool_callsArray.length; tool_calls_it++) {\n            let iterator = tool_calls_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'tool_callsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.tool_calls[${tool_calls_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.tool_calls[${tool_calls_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.tool_calls[${tool_calls_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.tool_calls[${tool_calls_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.tool_calls[${tool_calls_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'tool_callsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.tool_calls[${tool_calls_it}].type`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.tool_calls[${tool_calls_it}].type`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.tool_calls[${tool_calls_it}].type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.tool_calls[${tool_calls_it}].type`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.tool_calls[${tool_calls_it}].type`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('choices[${choices_it}].message.tool_calls[${tool_calls_it}].type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"choices[${choices_it}].message.tool_calls[${tool_calls_it}].type\", \"\")).to.include.oneOf([\"function\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'tool_callsArray' has 'function' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.tool_calls[${tool_calls_it}].function`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.tool_calls[${tool_calls_it}].function`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.tool_calls[${tool_calls_it}].function' has 'function' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.tool_calls[${tool_calls_it}].function`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.tool_calls[${tool_calls_it}].function`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'tool_callsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.name`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.name`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.name`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.name`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'tool_callsArray' has 'arguments' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.arguments`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.arguments`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.arguments' has 'arguments' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.arguments`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.tool_calls[${tool_calls_it}].function.arguments`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'role' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.role`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.role`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.role' has 'role' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.role`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.role`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('choices[${choices_it}].message.role to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"choices[${choices_it}].message.role\", \"\")).to.include.oneOf([\"assistant\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'function_call' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.function_call`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.function_call`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.function_call' has 'function_call' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.function_call`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.function_call`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'arguments' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.function_call.arguments`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.function_call.arguments`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.function_call.arguments' has 'arguments' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.function_call.arguments`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.function_call.arguments`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].message.function_call.name`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].message.function_call.name`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].message.function_call.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].message.function_call.name`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].message.function_call.name`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'logprobs' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].logprobs`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].logprobs' has 'logprobs' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].logprobs`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'choicesArray' has 'content' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.content`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].logprobs.content`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'choicesArray' has 'content' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the choices[${choices_it}].logprobs.content field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`choices[${choices_it}].logprobs.content`);\n          let contentArray = _.get(pm.response.json(), `choices[${choices_it}].logprobs.content`, \"\");\n          for (let content_it = 0; content_it < contentArray.length; content_it++) {\n            let iterator = content_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'contentArray' has 'token' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].token`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].logprobs.content[${content_it}].token`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].logprobs.content[${content_it}].token' has 'token' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].token`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].logprobs.content[${content_it}].token`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'contentArray' has 'logprob' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].logprob`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].logprobs.content[${content_it}].logprob`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].logprobs.content[${content_it}].logprob' has 'logprob' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].logprob`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].logprobs.content[${content_it}].logprob`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'contentArray' has 'bytes' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].bytes`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].bytes`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'contentArray' has 'bytes' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].bytes`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].bytes`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'contentArray' has 'top_logprobs' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'contentArray' has 'top_logprobs' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      pm.test(`Each object in the choices[${choices_it}].logprobs.content[${content_it}].top_logprobs field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`choices[${choices_it}].logprobs.content[${content_it}].top_logprobs`);\n          let top_logprobsArray = _.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs`, \"\");\n          for (let top_logprobs_it = 0; top_logprobs_it < top_logprobsArray.length; top_logprobs_it++) {\n            let iterator = top_logprobs_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'top_logprobsArray' has 'token' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].token`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].token`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].token' has 'token' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].token`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].token`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'top_logprobsArray' has 'logprob' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].logprob`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].logprob`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].logprob' has 'logprob' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].logprob`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].logprob`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'top_logprobsArray' has 'bytes' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].bytes`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].bytes`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'top_logprobsArray' has 'bytes' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].bytes`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].logprobs.content[${content_it}].top_logprobs[${top_logprobs_it}].bytes`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n          }\n\n      })\n\n          }\n\n      })\n\n          }\n\n      })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created`)){\n                  if(pm.expect(_.get(responseData[0], `created`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created`)){\n                if(pm.expect(_.get(responseData, `created`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(responseData[0], `model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(pm.response.json(), `model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `system_fingerprint` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`system_fingerprint`)){\n          if(pm.expect(_.get(responseData[0], `system_fingerprint`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `system_fingerprint`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `system_fingerprint` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`system_fingerprint`)){\n          if(pm.expect(_.get(pm.response.json(), `system_fingerprint`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `system_fingerprint`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"chat.completion\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `usage` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`usage`)){\n          if(pm.expect(_.get(responseData[0], `usage`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `usage`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `usage` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`usage`)){\n          if(pm.expect(_.get(pm.response.json(), `usage`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `usage`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `usage.completion_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`usage.completion_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `usage.completion_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `usage.completion_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `usage.completion_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`usage.completion_tokens`)){\n                if(pm.expect(_.get(responseData, `usage.completion_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `usage.completion_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `usage.prompt_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`usage.prompt_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `usage.prompt_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `usage.prompt_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `usage.prompt_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`usage.prompt_tokens`)){\n                if(pm.expect(_.get(responseData, `usage.prompt_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `usage.prompt_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `usage.total_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`usage.total_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `usage.total_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `usage.total_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `usage.total_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`usage.total_tokens`)){\n                if(pm.expect(_.get(responseData, `usage.total_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `usage.total_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "a32ef6cb-bbd4-49a6-8445-9ada4fbc6271",
      "name": "Creates a completion for the provided prompt and parameters.",
      "request": {
        "name": "Creates a completion for the provided prompt and parameters.",
        "description": {},
        "url": {
          "path": [
            "completions"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"model\": \"{{model}}\",\n    \"prompt\": \"{{prompt}}\",\n    \"best_of\": \"{{best_of}}\",\n    \"echo\": false,\n    \"frequency_penalty\": \"{{frequency_penalty}}\",\n    \"logit_bias\": null,\n    \"logprobs\": null,\n    \"max_tokens\": \"{{max_tokens}}\",\n    \"n\": \"{{n}}\",\n    \"presence_penalty\": \"{{presence_penalty}}\",\n    \"seed\": \"{{seed}}\",\n    \"stop\": \"{{stop}}\",\n    \"stream\": false,\n    \"suffix\": null,\n    \"temperature\": \"{{temperature}}\",\n    \"top_p\": \"{{top_p}}\",\n    \"user\": \"{{user}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "046ab695-ff50-4e5e-ac89-2886797cc501",
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "completions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"model\": \"{{model}}\",\n    \"prompt\": \"{{prompt}}\",\n    \"best_of\": \"{{best_of}}\",\n    \"echo\": false,\n    \"frequency_penalty\": \"{{frequency_penalty}}\",\n    \"logit_bias\": null,\n    \"logprobs\": null,\n    \"max_tokens\": \"{{max_tokens}}\",\n    \"n\": \"{{n}}\",\n    \"presence_penalty\": \"{{presence_penalty}}\",\n    \"seed\": \"{{seed}}\",\n    \"stop\": \"{{stop}}\",\n    \"stream\": false,\n    \"suffix\": \"{{suffix}}\",\n    \"temperature\": \"{{temperature}}\",\n    \"top_p\": \"{{top_p}}\",\n    \"user\": \"{{user}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"id\": \"proident\",\n  \"object\": \"text_completion\",\n  \"created\": 25712143,\n  \"model\": \"ipsum\",\n  \"choices\": [\n    {\n      \"finish_reason\": \"content_filter\",\n      \"index\": 50723359,\n      \"logprobs\": {\n        \"text_offset\": [\n          84986129,\n          72238203\n        ],\n        \"token_logprobs\": [\n          -48802371.47773516,\n          86966373.967087\n        ],\n        \"tokens\": [\n          \"Lorem Ut fugiat dolore quis\",\n          \"consectetur irure\"\n        ],\n        \"top_logprobs\": [\n          {\n            \"utbe\": -12565150.94210115,\n            \"veniam_b22\": -30935003.805989817,\n            \"velit_2\": -42431623.841508694,\n            \"officia78\": -14910189.933215529\n          },\n          {\n            \"Lorem_80a\": 39422134.91509211,\n            \"fugiat_2d0\": 28290132.552419007\n          }\n        ]\n      },\n      \"text\": \"velit culpa enim aute\"\n    },\n    {\n      \"finish_reason\": \"content_filter\",\n      \"index\": -47679111,\n      \"logprobs\": {\n        \"text_offset\": [\n          -30114,\n          3391503\n        ],\n        \"token_logprobs\": [\n          -45198785.88546429,\n          -10775336.164029032\n        ],\n        \"tokens\": [\n          \"consequat occaecat sed esse ex\",\n          \"magna dolore laboris reprehenderit deserunt\"\n        ],\n        \"top_logprobs\": [\n          {\n            \"laboris587\": -27640804.326707706,\n            \"commodo_e\": -50154171.15899972\n          },\n          {\n            \"Lorem49\": 47834916.47271681\n          }\n        ]\n      },\n      \"text\": \"cupida\"\n    }\n  ],\n  \"system_fingerprint\": \"est Excepteur sunt dolore nulla\",\n  \"usage\": {\n    \"prompt_tokens\": 62843352,\n    \"completion_tokens\": -10309829,\n    \"total_tokens\": 71600583\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /completions for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `choices` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`choices`)){\n              if(pm.expect(_.get(responseData[0], `choices`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `choices` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`choices`)){\n              if(pm.expect(_.get(pm.response.json(), `choices`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the choices field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`choices`);\n          let choicesArray = _.get(pm.response.json(), `choices`, \"\");\n          for (let choices_it = 0; choices_it < choicesArray.length; choices_it++) {\n            let iterator = choices_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'finish_reason' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].finish_reason`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].finish_reason`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].finish_reason' has 'finish_reason' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].finish_reason`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].finish_reason`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('choices[${choices_it}].finish_reason to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"choices[${choices_it}].finish_reason\", \"\")).to.include.oneOf([\"stop\",\"length\",\"content_filter\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'choicesArray'has 'index' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].index`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].index`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'choicesArray'has 'index' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].index`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].index`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'logprobs' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].logprobs`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].logprobs' has 'logprobs' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].logprobs`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'choicesArray' has 'text_offset' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.text_offset`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].logprobs.text_offset`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'choicesArray' has 'text_offset' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.text_offset`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].logprobs.text_offset`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'choicesArray' has 'token_logprobs' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.token_logprobs`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].logprobs.token_logprobs`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'choicesArray' has 'token_logprobs' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.token_logprobs`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].logprobs.token_logprobs`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'choicesArray' has 'tokens' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.tokens`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].logprobs.tokens`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'choicesArray' has 'tokens' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.tokens`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].logprobs.tokens`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'choicesArray' has 'top_logprobs' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `choices[${choices_it}].logprobs.top_logprobs`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `choices[${choices_it}].logprobs.top_logprobs`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'choicesArray' has 'top_logprobs' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].logprobs.top_logprobs`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `choices[${choices_it}].logprobs.top_logprobs`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'choicesArray' has 'text' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `choices[${choices_it}].text`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`choices[${choices_it}].text`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'choices[${choices_it}].text' has 'text' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `choices[${choices_it}].text`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`choices[${choices_it}].text`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created`)){\n                  if(pm.expect(_.get(responseData[0], `created`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created`)){\n                if(pm.expect(_.get(responseData, `created`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(responseData[0], `model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(pm.response.json(), `model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `system_fingerprint` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`system_fingerprint`)){\n          if(pm.expect(_.get(responseData[0], `system_fingerprint`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `system_fingerprint`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `system_fingerprint` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`system_fingerprint`)){\n          if(pm.expect(_.get(pm.response.json(), `system_fingerprint`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `system_fingerprint`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"text_completion\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `usage` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`usage`)){\n          if(pm.expect(_.get(responseData[0], `usage`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `usage`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `usage` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`usage`)){\n          if(pm.expect(_.get(pm.response.json(), `usage`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `usage`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `usage.completion_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`usage.completion_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `usage.completion_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `usage.completion_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `usage.completion_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`usage.completion_tokens`)){\n                if(pm.expect(_.get(responseData, `usage.completion_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `usage.completion_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `usage.prompt_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`usage.prompt_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `usage.prompt_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `usage.prompt_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `usage.prompt_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`usage.prompt_tokens`)){\n                if(pm.expect(_.get(responseData, `usage.prompt_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `usage.prompt_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `usage.total_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`usage.total_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `usage.total_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `usage.total_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `usage.total_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`usage.total_tokens`)){\n                if(pm.expect(_.get(responseData, `usage.total_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `usage.total_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "2ec570fb-f11f-4368-b683-90f61a294bc7",
      "name": "images",
      "item": [
        {
          "id": "480b9ed5-f45f-475c-9afc-5a89daa79088",
          "name": "Creates an image given a prompt.",
          "request": {
            "name": "Creates an image given a prompt.",
            "description": {},
            "url": {
              "path": [
                "images",
                "generations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"prompt\": \"{{prompt}}\",\n    \"model\": \"{{model}}\",\n    \"n\": \"{{n}}\",\n    \"quality\": \"{{quality}}\",\n    \"response_format\": \"{{response_format}}\",\n    \"size\": \"{{size}}\",\n    \"style\": \"{{style}}\",\n    \"user\": \"{{user}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "24375fbd-5982-40c8-ace5-e826b17ed44b",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "images",
                    "generations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"prompt\": \"{{prompt}}\",\n    \"model\": \"{{model}}\",\n    \"n\": \"{{n}}\",\n    \"quality\": \"{{quality}}\",\n    \"response_format\": \"{{response_format}}\",\n    \"size\": \"{{size}}\",\n    \"style\": \"{{style}}\",\n    \"user\": \"{{user}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"created\": -97296643,\n  \"data\": [\n    {\n      \"b64_json\": \"dolore ad Duis cupidatat nisi\",\n      \"url\": \"Lorem\",\n      \"revised_prompt\": \"cillum in amet\"\n    },\n    {\n      \"b64_json\": \"proident id \",\n      \"url\": \"consequat eiusmod amet non\",\n      \"revised_prompt\": \"sint occaecat\"\n    }\n  ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /images/generations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created`)){\n                  if(pm.expect(_.get(responseData[0], `created`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created`)){\n                if(pm.expect(_.get(responseData, `created`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'b64_json' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].b64_json`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].b64_json`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].b64_json' has 'b64_json' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].b64_json`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].b64_json`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'url' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].url`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].url`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].url' has 'url' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].url`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].url`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'revised_prompt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].revised_prompt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].revised_prompt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].revised_prompt' has 'revised_prompt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].revised_prompt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].revised_prompt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "4c9f5b4e-97d4-4ee3-a772-37566bb744a3",
          "name": "Creates an edited or extended image given an original image and a prompt.",
          "request": {
            "name": "Creates an edited or extended image given an original image and a prompt.",
            "description": {},
            "url": {
              "path": [
                "images",
                "edits"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "prompt",
                  "value": "{{prompt}}",
                  "type": "text",
                  "description": "(Required) A text description of the desired image(s). The maximum length is 1000 characters."
                },
                {
                  "key": "image",
                  "type": "file",
                  "description": "(Required) The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask."
                },
                {
                  "key": "mask",
                  "type": "file",
                  "description": "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`."
                },
                {
                  "key": "model",
                  "value": "{{model}}",
                  "type": "text",
                  "description": "The model to use for image generation. Only `dall-e-2` is supported at this time."
                },
                {
                  "key": "n",
                  "value": "{{n}}",
                  "type": "text",
                  "description": "The number of images to generate. Must be between 1 and 10."
                },
                {
                  "key": "size",
                  "value": "{{size}}",
                  "type": "text",
                  "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. (This can only be one of 256x256,512x512,1024x1024)"
                },
                {
                  "key": "response_format",
                  "value": "{{response_format}}",
                  "type": "text",
                  "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. (This can only be one of url,b64_json)"
                },
                {
                  "key": "user",
                  "value": "{{user}}",
                  "type": "text",
                  "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n"
                }
              ]
            }
          },
          "response": [
            {
              "id": "0f9fa3f8-40b8-4a48-9d19-eea63518e4ed",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "images",
                    "edits"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "description": {
                        "content": "(Required) A text description of the desired image(s). The maximum length is 1000 characters.",
                        "type": "text/plain"
                      },
                      "key": "prompt",
                      "value": "{{prompt}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "(Required) The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.",
                        "type": "text/plain"
                      },
                      "key": "image",
                      "value": "{{image}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.",
                        "type": "text/plain"
                      },
                      "key": "mask",
                      "value": "{{mask}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The model to use for image generation. Only `dall-e-2` is supported at this time.",
                        "type": "text/plain"
                      },
                      "key": "model",
                      "value": "{{model}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The number of images to generate. Must be between 1 and 10.",
                        "type": "text/plain"
                      },
                      "key": "n",
                      "value": "{{n}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. (This can only be one of 256x256,512x512,1024x1024)",
                        "type": "text/plain"
                      },
                      "key": "size",
                      "value": "{{size}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. (This can only be one of url,b64_json)",
                        "type": "text/plain"
                      },
                      "key": "response_format",
                      "value": "{{response_format}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
                        "type": "text/plain"
                      },
                      "key": "user",
                      "value": "{{user}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"created\": -2793268,\n  \"data\": [\n    {\n      \"b64_json\": \"culpa elit\",\n      \"url\": \"aliqua cillum\",\n      \"revised_prompt\": \"esse id\"\n    },\n    {\n      \"b64_json\": \"sunt nostrud incidid\",\n      \"url\": \"irure ullamco adipisicing dolore\",\n      \"revised_prompt\": \"pariatur do in proident\"\n    }\n  ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /images/edits for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created`)){\n                  if(pm.expect(_.get(responseData[0], `created`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created`)){\n                if(pm.expect(_.get(responseData, `created`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'b64_json' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].b64_json`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].b64_json`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].b64_json' has 'b64_json' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].b64_json`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].b64_json`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'url' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].url`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].url`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].url' has 'url' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].url`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].url`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'revised_prompt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].revised_prompt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].revised_prompt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].revised_prompt' has 'revised_prompt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].revised_prompt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].revised_prompt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "427d808a-4b09-4683-89cc-0a4f925578e8",
          "name": "Creates a variation of a given image.",
          "request": {
            "name": "Creates a variation of a given image.",
            "description": {},
            "url": {
              "path": [
                "images",
                "variations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "image",
                  "type": "file",
                  "description": "(Required) The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square."
                },
                {
                  "key": "model",
                  "value": "{{model}}",
                  "type": "text",
                  "description": "The model to use for image generation. Only `dall-e-2` is supported at this time."
                },
                {
                  "key": "n",
                  "value": "{{n}}",
                  "type": "text",
                  "description": "The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported."
                },
                {
                  "key": "response_format",
                  "value": "{{response_format}}",
                  "type": "text",
                  "description": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. (This can only be one of url,b64_json)"
                },
                {
                  "key": "size",
                  "value": "{{size}}",
                  "type": "text",
                  "description": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. (This can only be one of 256x256,512x512,1024x1024)"
                },
                {
                  "key": "user",
                  "value": "{{user}}",
                  "type": "text",
                  "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n"
                }
              ]
            }
          },
          "response": [
            {
              "id": "63d94107-8784-4b54-bf08-ae9bd3238cf0",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "images",
                    "variations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "description": {
                        "content": "(Required) The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.",
                        "type": "text/plain"
                      },
                      "key": "image",
                      "value": "{{image}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The model to use for image generation. Only `dall-e-2` is supported at this time.",
                        "type": "text/plain"
                      },
                      "key": "model",
                      "value": "{{model}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.",
                        "type": "text/plain"
                      },
                      "key": "n",
                      "value": "{{n}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The format in which the generated images are returned. Must be one of `url` or `b64_json`. (This can only be one of url,b64_json)",
                        "type": "text/plain"
                      },
                      "key": "response_format",
                      "value": "{{response_format}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`. (This can only be one of 256x256,512x512,1024x1024)",
                        "type": "text/plain"
                      },
                      "key": "size",
                      "value": "{{size}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).\n",
                        "type": "text/plain"
                      },
                      "key": "user",
                      "value": "{{user}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"created\": -2793268,\n  \"data\": [\n    {\n      \"b64_json\": \"culpa elit\",\n      \"url\": \"aliqua cillum\",\n      \"revised_prompt\": \"esse id\"\n    },\n    {\n      \"b64_json\": \"sunt nostrud incidid\",\n      \"url\": \"irure ullamco adipisicing dolore\",\n      \"revised_prompt\": \"pariatur do in proident\"\n    }\n  ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /images/variations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created`)){\n                  if(pm.expect(_.get(responseData[0], `created`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created`)){\n                if(pm.expect(_.get(responseData, `created`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'b64_json' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].b64_json`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].b64_json`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].b64_json' has 'b64_json' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].b64_json`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].b64_json`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'url' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].url`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].url`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].url' has 'url' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].url`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].url`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'revised_prompt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].revised_prompt`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].revised_prompt`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].revised_prompt' has 'revised_prompt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].revised_prompt`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].revised_prompt`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "09988f44-2b72-4feb-9f8e-e8405ffa316d",
      "name": "Creates an embedding vector representing the input text.",
      "request": {
        "name": "Creates an embedding vector representing the input text.",
        "description": {},
        "url": {
          "path": [
            "embeddings"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"model\": \"{{model}}\",\n    \"input\": \"{{input}}\",\n    \"encoding_format\": \"{{encoding_format}}\",\n    \"dimensions\": \"{{dimensions}}\",\n    \"user\": \"{{user}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "b81705fe-1c0b-478c-b6b3-3b961f4bce89",
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "embeddings"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"model\": \"{{model}}\",\n    \"input\": \"{{input}}\",\n    \"encoding_format\": \"{{encoding_format}}\",\n    \"dimensions\": \"{{dimensions}}\",\n    \"user\": \"{{user}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"object\": \"list\",\n  \"model\": \"in\",\n  \"data\": [\n    {\n      \"index\": -88933002,\n      \"object\": \"embedding\",\n      \"embedding\": [\n        -10362547.628605962,\n        -90510613.47625118\n      ]\n    },\n    {\n      \"index\": 11303611,\n      \"object\": \"embedding\",\n      \"embedding\": [\n        -8233357.7781894505,\n        59290821.09730178\n      ]\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 57226639,\n    \"total_tokens\": 63106321\n  }\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /embeddings for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'index' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].index`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].index`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'index' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].index`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].index`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'dataArray' has 'embedding' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].embedding`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data[${data_it}].embedding`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'dataArray' has 'embedding' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].embedding`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data[${data_it}].embedding`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"embedding\"]);\n        })\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(responseData[0], `model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(pm.response.json(), `model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `usage` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`usage`)){\n          if(pm.expect(_.get(responseData[0], `usage`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `usage`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `usage` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`usage`)){\n          if(pm.expect(_.get(pm.response.json(), `usage`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `usage`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `usage.prompt_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`usage.prompt_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `usage.prompt_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `usage.prompt_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `usage.prompt_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`usage.prompt_tokens`)){\n                if(pm.expect(_.get(responseData, `usage.prompt_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `usage.prompt_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `usage.total_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`usage.total_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `usage.total_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `usage.total_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `usage.total_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`usage.total_tokens`)){\n                if(pm.expect(_.get(responseData, `usage.total_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `usage.total_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "df24e480-f2fa-459a-8780-14992cbd16e4",
      "name": "audio",
      "item": [
        {
          "id": "1e9f9b0c-e18f-4f74-9cef-2f72fae0f94f",
          "name": "Generates audio from the input text.",
          "request": {
            "name": "Generates audio from the input text.",
            "description": {},
            "url": {
              "path": [
                "audio",
                "speech"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/octet-stream"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"model\": \"{{model}}\",\n    \"input\": \"{{input}}\",\n    \"voice\": \"{{voice}}\",\n    \"response_format\": \"{{response_format}}\",\n    \"speed\": \"{{speed}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "dc3dfcd4-05ab-4894-8e49-a221490e18ec",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "audio",
                    "speech"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/octet-stream"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"model\": \"{{model}}\",\n    \"input\": \"{{input}}\",\n    \"voice\": \"{{voice}}\",\n    \"response_format\": \"{{response_format}}\",\n    \"speed\": \"{{speed}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "chunked",
                  "key": "Transfer-Encoding",
                  "value": "{{Transfer-Encoding}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/octet-stream"
                }
              ],
              "body": "est enim",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /audio/speech for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d5813fa1-324c-444c-9cfc-64bd81d50a3a",
          "name": "Transcribes audio into the input language.",
          "request": {
            "name": "Transcribes audio into the input language.",
            "description": {},
            "url": {
              "path": [
                "audio",
                "transcriptions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "description": "(Required) The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n"
                },
                {
                  "key": "model",
                  "value": "{{model}}",
                  "type": "text",
                  "description": "(Required) ID of the model to use. Only `whisper-1` is currently available.\n"
                },
                {
                  "key": "language",
                  "value": "{{language}}",
                  "type": "text",
                  "description": "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n"
                },
                {
                  "key": "prompt",
                  "value": "{{prompt}}",
                  "type": "text",
                  "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n"
                },
                {
                  "key": "response_format",
                  "value": "{{response_format}}",
                  "type": "text",
                  "description": "The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n (This can only be one of json,text,srt,verbose_json,vtt)"
                },
                {
                  "key": "temperature",
                  "value": "{{temperature}}",
                  "type": "text",
                  "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n"
                }
              ]
            }
          },
          "response": [
            {
              "id": "7f2d3962-9e38-41cc-ac7d-5a35e17cdbbb",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "audio",
                    "transcriptions"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "description": {
                        "content": "(Required) The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n",
                        "type": "text/plain"
                      },
                      "key": "file",
                      "value": "{{file}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "(Required) ID of the model to use. Only `whisper-1` is currently available.\n",
                        "type": "text/plain"
                      },
                      "key": "model",
                      "value": "{{model}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.\n",
                        "type": "text/plain"
                      },
                      "key": "language",
                      "value": "{{language}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.\n",
                        "type": "text/plain"
                      },
                      "key": "prompt",
                      "value": "{{prompt}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n (This can only be one of json,text,srt,verbose_json,vtt)",
                        "type": "text/plain"
                      },
                      "key": "response_format",
                      "value": "{{response_format}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
                        "type": "text/plain"
                      },
                      "key": "temperature",
                      "value": "{{temperature}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"text\": \"id aliqua\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /audio/transcriptions for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `text` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`text`)){\n          if(pm.expect(_.get(responseData[0], `text`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `text`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `text` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`text`)){\n          if(pm.expect(_.get(pm.response.json(), `text`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `text`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "22b8ae0a-f77e-44f5-a7d3-cc926dc8d306",
          "name": "Translates audio into English.",
          "request": {
            "name": "Translates audio into English.",
            "description": {},
            "url": {
              "path": [
                "audio",
                "translations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "description": "(Required) The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n"
                },
                {
                  "key": "model",
                  "value": "{{model}}",
                  "type": "text",
                  "description": "(Required) ID of the model to use. Only `whisper-1` is currently available.\n"
                },
                {
                  "key": "prompt",
                  "value": "{{prompt}}",
                  "type": "text",
                  "description": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n"
                },
                {
                  "key": "response_format",
                  "value": "{{response_format}}",
                  "type": "text",
                  "description": "The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n"
                },
                {
                  "key": "temperature",
                  "value": "{{temperature}}",
                  "type": "text",
                  "description": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n"
                }
              ]
            }
          },
          "response": [
            {
              "id": "80820f50-4be6-403c-9161-97299a4af43c",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "audio",
                    "translations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "description": {
                        "content": "(Required) The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n",
                        "type": "text/plain"
                      },
                      "key": "file",
                      "value": "{{file}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "(Required) ID of the model to use. Only `whisper-1` is currently available.\n",
                        "type": "text/plain"
                      },
                      "key": "model",
                      "value": "{{model}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English.\n",
                        "type": "text/plain"
                      },
                      "key": "prompt",
                      "value": "{{prompt}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n",
                        "type": "text/plain"
                      },
                      "key": "response_format",
                      "value": "{{response_format}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n",
                        "type": "text/plain"
                      },
                      "key": "temperature",
                      "value": "{{temperature}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"text\": \"id aliqua\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /audio/translations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `text` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`text`)){\n          if(pm.expect(_.get(responseData[0], `text`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `text`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `text` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`text`)){\n          if(pm.expect(_.get(pm.response.json(), `text`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `text`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "15ccfea6-18f0-4502-a0d7-17b775887b2f",
      "name": "files",
      "item": [
        {
          "id": "a7f0ab25-e803-4b5b-9c32-92aa5400b64e",
          "name": "Returns a list of files that belong to the user's organization.",
          "request": {
            "name": "Returns a list of files that belong to the user's organization.",
            "description": {},
            "url": {
              "path": [
                "files"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "purpose",
                  "value": "{{purpose}}",
                  "description": "Only return files with the given purpose."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "e518b1fd-0f31-4eec-9514-6307c3aa10da",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "files"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "purpose",
                      "value": "{{purpose}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"nisi voluptate cillum Ut\",\n      \"object\": \"file\",\n      \"bytes\": -20622176,\n      \"created_at\": 35128763,\n      \"filename\": \"velit aute\",\n      \"purpose\": \"assistants\",\n      \"status\": \"error\",\n      \"status_details\": \"Excepteur irure\"\n    },\n    {\n      \"id\": \"cupidatat\",\n      \"object\": \"file\",\n      \"bytes\": 74357182,\n      \"created_at\": 89143371,\n      \"filename\": \"ut occaecat\",\n      \"purpose\": \"assistants\",\n      \"status\": \"error\",\n      \"status_details\": \"sunt laboris\"\n    }\n  ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /files?purpose=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'filename' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].filename' has 'filename' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'purpose' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].purpose' has 'purpose' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status_details' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status_details' has 'status_details' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "5c2dccfe-e03c-4fa5-b038-8b32b6c29313",
          "name": "Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.\n\nThe size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.\n\nPlease [contact us](https://help.openai.com/) if you need to increase these storage limits.\n",
          "request": {
            "name": "Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.\n\nThe size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.\n\nPlease [contact us](https://help.openai.com/) if you need to increase these storage limits.\n",
            "description": {},
            "url": {
              "path": [
                "files"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "description": "(Required) The File object (not file name) to be uploaded.\n"
                },
                {
                  "key": "purpose",
                  "value": "{{purpose}}",
                  "type": "text",
                  "description": "(Required) The intended purpose of the uploaded file.\n\nUse \"fine-tune\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \"assistants\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.\n (This can only be one of fine-tune,assistants)"
                }
              ]
            }
          },
          "response": [
            {
              "id": "555f7ff0-50f1-4827-ad7f-40da783f0a2a",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "files"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "description": {
                        "content": "(Required) The File object (not file name) to be uploaded.\n",
                        "type": "text/plain"
                      },
                      "key": "file",
                      "value": "{{file}}",
                      "type": "text"
                    },
                    {
                      "description": {
                        "content": "(Required) The intended purpose of the uploaded file.\n\nUse \"fine-tune\" for [Fine-tuning](/docs/api-reference/fine-tuning) and \"assistants\" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.\n (This can only be one of fine-tune,assistants)",
                        "type": "text/plain"
                      },
                      "key": "purpose",
                      "value": "{{purpose}}",
                      "type": "text"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"sint\",\n  \"object\": \"file\",\n  \"bytes\": -65101503,\n  \"created_at\": -98040657,\n  \"filename\": \"sit qui aute sed\",\n  \"purpose\": \"fine-tune-results\",\n  \"status\": \"uploaded\",\n  \"status_details\": \"ut enim nostrud\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /files for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `bytes` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`bytes`)){\n                  if(pm.expect(_.get(responseData[0], `bytes`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `bytes`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `bytes` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`bytes`)){\n                if(pm.expect(_.get(responseData, `bytes`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `bytes`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `filename` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`filename`)){\n          if(pm.expect(_.get(responseData[0], `filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `filename`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `filename` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`filename`)){\n          if(pm.expect(_.get(pm.response.json(), `filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `filename`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `purpose` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`purpose`)){\n          if(pm.expect(_.get(responseData[0], `purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `purpose`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `purpose` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`purpose`)){\n          if(pm.expect(_.get(pm.response.json(), `purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `purpose`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status_details` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status_details`)){\n          if(pm.expect(_.get(responseData[0], `status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status_details`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status_details` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status_details`)){\n          if(pm.expect(_.get(pm.response.json(), `status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status_details`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fb729602-f732-4317-a668-a74382e676d4",
          "name": "{file_id}",
          "item": [
            {
              "id": "105ea337-5fce-4b9b-bd32-6763ed8e8b9c",
              "name": "Delete a file.",
              "request": {
                "name": "Delete a file.",
                "description": {},
                "url": {
                  "path": [
                    "files",
                    ":file_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{file_id}}",
                      "key": "file_id",
                      "description": "(Required) The ID of the file to use for this request."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "775e17e9-7578-4bae-8813-a84c42edc83a",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        ":file_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{file_id}}",
                          "key": "file_id",
                          "description": "(Required) The ID of the file to use for this request."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"exercitation am\",\n  \"object\": \"file\",\n  \"deleted\": true\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /files/:file_id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(responseData[0], `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(pm.response.json(), `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "b5f74969-5eaa-4fed-be90-a29f6905fa95",
              "name": "Returns information about a specific file.",
              "request": {
                "name": "Returns information about a specific file.",
                "description": {},
                "url": {
                  "path": [
                    "files",
                    ":file_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{file_id}}",
                      "key": "file_id",
                      "description": "(Required) The ID of the file to use for this request."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "6aa02584-4823-414a-9979-418c9fb312dd",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        ":file_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{file_id}}",
                          "key": "file_id",
                          "description": "(Required) The ID of the file to use for this request."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"sint\",\n  \"object\": \"file\",\n  \"bytes\": -65101503,\n  \"created_at\": -98040657,\n  \"filename\": \"sit qui aute sed\",\n  \"purpose\": \"fine-tune-results\",\n  \"status\": \"uploaded\",\n  \"status_details\": \"ut enim nostrud\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /files/:file_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'filename' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].filename' has 'filename' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'purpose' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].purpose' has 'purpose' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status_details' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status_details' has 'status_details' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "06808543-9108-42c8-acc9-fb5b9937701e",
              "name": "Returns the contents of the specified file.",
              "request": {
                "name": "Returns the contents of the specified file.",
                "description": {},
                "url": {
                  "path": [
                    "files",
                    ":file_id",
                    "content"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{file_id}}",
                      "key": "file_id",
                      "description": "(Required) The ID of the file to use for this request."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "5aadcd0a-368e-4ba0-b2f9-32a0ae4e3132",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "files",
                        ":file_id",
                        "content"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{file_id}}",
                          "key": "file_id",
                          "description": "(Required) The ID of the file to use for this request."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "\"est enim\"",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /files/:file_id/content for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'filename' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].filename' has 'filename' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'purpose' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].purpose' has 'purpose' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status_details' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status_details' has 'status_details' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "415c6d07-af63-4b7c-9355-79124159b650",
      "name": "fine_tuning/jobs",
      "item": [
        {
          "id": "25104820-b41b-4be4-bd11-4ed1101efa51",
          "name": "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n",
          "request": {
            "name": "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n",
            "description": {},
            "url": {
              "path": [
                "fine_tuning",
                "jobs"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"model\": \"{{model}}\",\n    \"training_file\": \"{{training_file}}\",\n    \"hyperparameters\": {\n        \"batch_size\": \"{{batch_size}}\",\n        \"learning_rate_multiplier\": \"{{learning_rate_multiplier}}\",\n        \"n_epochs\": \"{{n_epochs}}\"\n    },\n    \"suffix\": null,\n    \"validation_file\": \"{{validation_file}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "2010c5f0-06cd-40a5-b935-1b0dea17a823",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "fine_tuning",
                    "jobs"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"model\": \"{{model}}\",\n    \"training_file\": \"{{training_file}}\",\n    \"hyperparameters\": {\n        \"batch_size\": \"{{batch_size}}\",\n        \"learning_rate_multiplier\": \"{{learning_rate_multiplier}}\",\n        \"n_epochs\": \"{{n_epochs}}\"\n    },\n    \"suffix\": null,\n    \"validation_file\": \"{{validation_file}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"created_at\": 31024318,\n  \"error\": {\n    \"code\": \"consectetur non\",\n    \"message\": \"aliqua dolo\",\n    \"param\": \"Duis anim ea\"\n  },\n  \"finished_at\": 27019858,\n  \"fine_tuned_model\": \"occaecat eiusmod\",\n  \"hyperparameters\": {\n    \"n_epochs\": \"auto\"\n  },\n  \"id\": \"fugiat\",\n  \"model\": \"ad cons\",\n  \"object\": \"fine_tuning.job\",\n  \"organization_id\": \"do adipisicin\",\n  \"result_files\": [\n    \"file-abc123\",\n    \"file-abc123\"\n  ],\n  \"status\": \"failed\",\n  \"trained_tokens\": 3417221,\n  \"training_file\": \"ut es\",\n  \"validation_file\": \"aliquip in in\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /fine_tuning/jobs for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `error` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`error`)){\n          if(pm.expect(_.get(responseData[0], `error`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `error`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `error` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`error`)){\n          if(pm.expect(_.get(pm.response.json(), `error`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `error`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `error.code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`error.code`)){\n          if(pm.expect(_.get(responseData[0], `error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `error.code`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `error.code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`error.code`)){\n          if(pm.expect(_.get(pm.response.json(), `error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `error.code`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `error.message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`error.message`)){\n          if(pm.expect(_.get(responseData[0], `error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `error.message`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `error.message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`error.message`)){\n          if(pm.expect(_.get(pm.response.json(), `error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `error.message`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `error.param` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`error.param`)){\n          if(pm.expect(_.get(responseData[0], `error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `error.param`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `error.param` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`error.param`)){\n          if(pm.expect(_.get(pm.response.json(), `error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `error.param`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `fine_tuned_model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`fine_tuned_model`)){\n          if(pm.expect(_.get(responseData[0], `fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `fine_tuned_model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`fine_tuned_model`)){\n          if(pm.expect(_.get(pm.response.json(), `fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `finished_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`finished_at`)){\n                  if(pm.expect(_.get(responseData[0], `finished_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `finished_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `finished_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`finished_at`)){\n                if(pm.expect(_.get(responseData, `finished_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `finished_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `hyperparameters` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`hyperparameters`)){\n          if(pm.expect(_.get(responseData[0], `hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `hyperparameters`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `hyperparameters` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`hyperparameters`)){\n          if(pm.expect(_.get(pm.response.json(), `hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `hyperparameters`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(responseData[0], `model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(pm.response.json(), `model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"fine_tuning.job\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `organization_id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`organization_id`)){\n          if(pm.expect(_.get(responseData[0], `organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `organization_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `organization_id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`organization_id`)){\n          if(pm.expect(_.get(pm.response.json(), `organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `organization_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `result_files` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`result_files`)){\n              if(pm.expect(_.get(responseData[0], `result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `result_files`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `result_files` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`result_files`)){\n              if(pm.expect(_.get(pm.response.json(), `result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `result_files`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"status\", \"\")).to.include.oneOf([\"validating_files\",\"queued\",\"running\",\"succeeded\",\"failed\",\"cancelled\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `trained_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`trained_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `trained_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `trained_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `trained_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`trained_tokens`)){\n                if(pm.expect(_.get(responseData, `trained_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `trained_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `training_file` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`training_file`)){\n          if(pm.expect(_.get(responseData[0], `training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `training_file`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `training_file` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`training_file`)){\n          if(pm.expect(_.get(pm.response.json(), `training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `training_file`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `validation_file` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`validation_file`)){\n          if(pm.expect(_.get(responseData[0], `validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `validation_file`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `validation_file` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`validation_file`)){\n          if(pm.expect(_.get(pm.response.json(), `validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `validation_file`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "47f8d062-fb87-41c0-a4d5-0147e1b32460",
          "name": "List your organization's fine-tuning jobs\n",
          "request": {
            "name": "List your organization's fine-tuning jobs\n",
            "description": {},
            "url": {
              "path": [
                "fine_tuning",
                "jobs"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "after",
                  "value": "{{after}}",
                  "description": "Identifier for the last job from the previous pagination request."
                },
                {
                  "disabled": false,
                  "key": "limit",
                  "value": "{{limit}}",
                  "description": "Number of fine-tuning jobs to retrieve."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "7a4cc04c-1b8d-44d9-a5ba-e249c2178cb1",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "fine_tuning",
                    "jobs"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "after",
                      "value": "{{after}}"
                    },
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"created_at\": -66203922,\n      \"error\": {\n        \"code\": \"pariatur\",\n        \"message\": \"in laboris dolor in\",\n        \"param\": \"laborum pariatur non\"\n      },\n      \"finished_at\": 67270050,\n      \"fine_tuned_model\": \"ipsum et\",\n      \"hyperparameters\": {\n        \"n_epochs\": \"auto\"\n      },\n      \"id\": \"Duis consequat nostrud\",\n      \"model\": \"anim Excepteur aliqua\",\n      \"object\": \"fine_tuning.job\",\n      \"organization_id\": \"et cupidatat mollit\",\n      \"result_files\": [\n        \"file-abc123\",\n        \"file-abc123\"\n      ],\n      \"status\": \"running\",\n      \"trained_tokens\": 55169041,\n      \"training_file\": \"reprehenderit ut\",\n      \"validation_file\": \"a\"\n    },\n    {\n      \"created_at\": 57912382,\n      \"error\": {\n        \"code\": \"labore officia proident ad ut\",\n        \"message\": \"est\",\n        \"param\": \"in laboris dolore\"\n      },\n      \"finished_at\": -47247290,\n      \"fine_tuned_model\": \"fugiat laboris\",\n      \"hyperparameters\": {\n        \"n_epochs\": \"auto\"\n      },\n      \"id\": \"qui fugiat\",\n      \"model\": \"minim cupidatat\",\n      \"object\": \"fine_tuning.job\",\n      \"organization_id\": \"irure aute enim eiusmod dolore\",\n      \"result_files\": [\n        \"file-abc123\",\n        \"file-abc123\"\n      ],\n      \"status\": \"failed\",\n      \"trained_tokens\": -61214327,\n      \"training_file\": \"non est\",\n      \"validation_file\": \"Duis mollit\"\n    }\n  ],\n  \"has_more\": true\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /fine_tuning/jobs?after=<string>&limit=20 for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'error' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error' has 'error' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'code' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.code`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.code' has 'code' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.code`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'message' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.message`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.message' has 'message' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.message`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'param' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.param`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.param' has 'param' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.param`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'fine_tuned_model' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].fine_tuned_model' has 'fine_tuned_model' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'finished_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].finished_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].finished_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'finished_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].finished_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].finished_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'hyperparameters' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].hyperparameters`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].hyperparameters' has 'hyperparameters' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].hyperparameters`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'model' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].model' has 'model' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"fine_tuning.job\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'organization_id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].organization_id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].organization_id' has 'organization_id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].organization_id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'dataArray' has 'result_files' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data[${data_it}].result_files`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'dataArray' has 'result_files' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data[${data_it}].result_files`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"validating_files\",\"queued\",\"running\",\"succeeded\",\"failed\",\"cancelled\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'trained_tokens' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].trained_tokens`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].trained_tokens`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'trained_tokens' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].trained_tokens`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].trained_tokens`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'training_file' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].training_file`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].training_file' has 'training_file' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].training_file`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'validation_file' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].validation_file`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].validation_file' has 'validation_file' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].validation_file`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(responseData[0], `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(pm.response.json(), `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "7436eabf-492b-40b8-ae0c-3228d09d26b3",
          "name": "{fine_tuning_job_id}",
          "item": [
            {
              "id": "ef4e8a10-6e34-42f1-88a4-3c9007a8ffae",
              "name": "Get info about a fine-tuning job.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n",
              "request": {
                "name": "Get info about a fine-tuning job.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n",
                "description": {},
                "url": {
                  "path": [
                    "fine_tuning",
                    "jobs",
                    ":fine_tuning_job_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{fine_tuning_job_id}}",
                      "key": "fine_tuning_job_id",
                      "description": "(Required) The ID of the fine-tuning job.\n"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "6d9901ff-714a-40f6-9b06-ba9d1d824236",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "fine_tuning",
                        "jobs",
                        ":fine_tuning_job_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{fine_tuning_job_id}}",
                          "key": "fine_tuning_job_id",
                          "description": "(Required) The ID of the fine-tuning job.\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"created_at\": 74656212,\n  \"error\": {\n    \"code\": \"officia nisi ipsum in\",\n    \"message\": \"labore nis\",\n    \"param\": \"et\"\n  },\n  \"finished_at\": -52051299,\n  \"fine_tuned_model\": \"sunt veniam\",\n  \"hyperparameters\": {\n    \"n_epochs\": \"auto\"\n  },\n  \"id\": \"ullamco incididunt\",\n  \"model\": \"Duis pariatur\",\n  \"object\": \"fine_tuning.job\",\n  \"organization_id\": \"reprehenderit sed irure nulla aute\",\n  \"result_files\": [\n    \"file-abc123\",\n    \"file-abc123\"\n  ],\n  \"status\": \"succeeded\",\n  \"trained_tokens\": 59841221,\n  \"training_file\": \"dolore\",\n  \"validation_file\": \"nulla deserunt laborum quis\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /fine_tuning/jobs/:fine_tuning_job_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'error' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error' has 'error' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'code' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.code`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.code' has 'code' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.code`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'message' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.message`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.message' has 'message' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.message`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'param' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.param`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.param' has 'param' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.param`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'fine_tuned_model' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].fine_tuned_model' has 'fine_tuned_model' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'finished_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].finished_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].finished_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'finished_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].finished_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].finished_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'hyperparameters' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].hyperparameters`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].hyperparameters' has 'hyperparameters' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].hyperparameters`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'model' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].model' has 'model' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"fine_tuning.job\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'organization_id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].organization_id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].organization_id' has 'organization_id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].organization_id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'dataArray' has 'result_files' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data[${data_it}].result_files`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'dataArray' has 'result_files' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data[${data_it}].result_files`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"validating_files\",\"queued\",\"running\",\"succeeded\",\"failed\",\"cancelled\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'trained_tokens' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].trained_tokens`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].trained_tokens`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'trained_tokens' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].trained_tokens`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].trained_tokens`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'training_file' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].training_file`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].training_file' has 'training_file' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].training_file`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'validation_file' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].validation_file`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].validation_file' has 'validation_file' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].validation_file`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(responseData[0], `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(pm.response.json(), `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "076c2332-e198-4b39-ba6f-954d8c48f9d7",
              "name": "Get status updates for a fine-tuning job.\n",
              "request": {
                "name": "Get status updates for a fine-tuning job.\n",
                "description": {},
                "url": {
                  "path": [
                    "fine_tuning",
                    "jobs",
                    ":fine_tuning_job_id",
                    "events"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "after",
                      "value": "{{after}}",
                      "description": "Identifier for the last event from the previous pagination request."
                    },
                    {
                      "disabled": false,
                      "key": "limit",
                      "value": "{{limit}}",
                      "description": "Number of events to retrieve."
                    }
                  ],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{fine_tuning_job_id}}",
                      "key": "fine_tuning_job_id",
                      "description": "(Required) The ID of the fine-tuning job to get events for.\n"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "c69ee0de-df59-4c03-a582-3e776159aeb6",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "fine_tuning",
                        "jobs",
                        ":fine_tuning_job_id",
                        "events"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "after",
                          "value": "{{after}}"
                        },
                        {
                          "key": "limit",
                          "value": "{{limit}}"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{fine_tuning_job_id}}",
                          "key": "fine_tuning_job_id",
                          "description": "(Required) The ID of the fine-tuning job to get events for.\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"dolore ullamco ut pariatur id\",\n      \"object\": \"fine_tuning.job.event\",\n      \"created_at\": 59002391,\n      \"level\": \"info\",\n      \"message\": \"non sint\"\n    },\n    {\n      \"id\": \"labore reprehenderit offici\",\n      \"object\": \"fine_tuning.job.event\",\n      \"created_at\": 99445695,\n      \"level\": \"warn\",\n      \"message\": \"cillum\"\n    }\n  ]\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /fine_tuning/jobs/:fine_tuning_job_id/events?after=<string>&limit=20 for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'error' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error' has 'error' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'code' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.code`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.code' has 'code' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.code`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'message' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.message`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.message' has 'message' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.message`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'param' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].error.param`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].error.param' has 'param' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].error.param`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'fine_tuned_model' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].fine_tuned_model' has 'fine_tuned_model' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'finished_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].finished_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].finished_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'finished_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].finished_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].finished_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'hyperparameters' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].hyperparameters`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].hyperparameters' has 'hyperparameters' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].hyperparameters`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'model' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].model' has 'model' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"fine_tuning.job\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'organization_id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].organization_id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].organization_id' has 'organization_id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].organization_id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'dataArray' has 'result_files' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data[${data_it}].result_files`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'dataArray' has 'result_files' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data[${data_it}].result_files`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"validating_files\",\"queued\",\"running\",\"succeeded\",\"failed\",\"cancelled\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'trained_tokens' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].trained_tokens`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].trained_tokens`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'trained_tokens' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].trained_tokens`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].trained_tokens`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'training_file' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].training_file`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].training_file' has 'training_file' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].training_file`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'validation_file' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].validation_file`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].validation_file' has 'validation_file' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].validation_file`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(responseData[0], `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(pm.response.json(), `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "3b68059c-b2a2-4def-93f2-e80eaff9a827",
              "name": "Immediately cancel a fine-tune job.\n",
              "request": {
                "name": "Immediately cancel a fine-tune job.\n",
                "description": {},
                "url": {
                  "path": [
                    "fine_tuning",
                    "jobs",
                    ":fine_tuning_job_id",
                    "cancel"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{fine_tuning_job_id}}",
                      "key": "fine_tuning_job_id",
                      "description": "(Required) The ID of the fine-tuning job to cancel.\n"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": null
              },
              "response": [
                {
                  "id": "2358f185-7a14-414d-898a-905105ee7dad",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "fine_tuning",
                        "jobs",
                        ":fine_tuning_job_id",
                        "cancel"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{fine_tuning_job_id}}",
                          "key": "fine_tuning_job_id",
                          "description": "(Required) The ID of the fine-tuning job to cancel.\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"created_at\": 74656212,\n  \"error\": {\n    \"code\": \"officia nisi ipsum in\",\n    \"message\": \"labore nis\",\n    \"param\": \"et\"\n  },\n  \"finished_at\": -52051299,\n  \"fine_tuned_model\": \"sunt veniam\",\n  \"hyperparameters\": {\n    \"n_epochs\": \"auto\"\n  },\n  \"id\": \"ullamco incididunt\",\n  \"model\": \"Duis pariatur\",\n  \"object\": \"fine_tuning.job\",\n  \"organization_id\": \"reprehenderit sed irure nulla aute\",\n  \"result_files\": [\n    \"file-abc123\",\n    \"file-abc123\"\n  ],\n  \"status\": \"succeeded\",\n  \"trained_tokens\": 59841221,\n  \"training_file\": \"dolore\",\n  \"validation_file\": \"nulla deserunt laborum quis\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /fine_tuning/jobs/:fine_tuning_job_id/cancel for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `error` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`error`)){\n          if(pm.expect(_.get(responseData[0], `error`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `error`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `error` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`error`)){\n          if(pm.expect(_.get(pm.response.json(), `error`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `error`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `error.code` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`error.code`)){\n          if(pm.expect(_.get(responseData[0], `error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `error.code`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `error.code` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`error.code`)){\n          if(pm.expect(_.get(pm.response.json(), `error.code`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `error.code`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `error.message` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`error.message`)){\n          if(pm.expect(_.get(responseData[0], `error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `error.message`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `error.message` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`error.message`)){\n          if(pm.expect(_.get(pm.response.json(), `error.message`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `error.message`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `error.param` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`error.param`)){\n          if(pm.expect(_.get(responseData[0], `error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `error.param`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `error.param` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`error.param`)){\n          if(pm.expect(_.get(pm.response.json(), `error.param`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `error.param`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `fine_tuned_model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`fine_tuned_model`)){\n          if(pm.expect(_.get(responseData[0], `fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `fine_tuned_model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`fine_tuned_model`)){\n          if(pm.expect(_.get(pm.response.json(), `fine_tuned_model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `fine_tuned_model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `finished_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`finished_at`)){\n                  if(pm.expect(_.get(responseData[0], `finished_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `finished_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `finished_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`finished_at`)){\n                if(pm.expect(_.get(responseData, `finished_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `finished_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `hyperparameters` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`hyperparameters`)){\n          if(pm.expect(_.get(responseData[0], `hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `hyperparameters`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `hyperparameters` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`hyperparameters`)){\n          if(pm.expect(_.get(pm.response.json(), `hyperparameters`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `hyperparameters`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(responseData[0], `model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(pm.response.json(), `model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"fine_tuning.job\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `organization_id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`organization_id`)){\n          if(pm.expect(_.get(responseData[0], `organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `organization_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `organization_id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`organization_id`)){\n          if(pm.expect(_.get(pm.response.json(), `organization_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `organization_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `result_files` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`result_files`)){\n              if(pm.expect(_.get(responseData[0], `result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `result_files`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `result_files` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`result_files`)){\n              if(pm.expect(_.get(pm.response.json(), `result_files`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `result_files`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"status\", \"\")).to.include.oneOf([\"validating_files\",\"queued\",\"running\",\"succeeded\",\"failed\",\"cancelled\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `trained_tokens` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`trained_tokens`)){\n                  if(pm.expect(_.get(responseData[0], `trained_tokens`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `trained_tokens`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `trained_tokens` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`trained_tokens`)){\n                if(pm.expect(_.get(responseData, `trained_tokens`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `trained_tokens`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `training_file` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`training_file`)){\n          if(pm.expect(_.get(responseData[0], `training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `training_file`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `training_file` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`training_file`)){\n          if(pm.expect(_.get(pm.response.json(), `training_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `training_file`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `validation_file` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`validation_file`)){\n          if(pm.expect(_.get(responseData[0], `validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `validation_file`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `validation_file` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`validation_file`)){\n          if(pm.expect(_.get(pm.response.json(), `validation_file`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `validation_file`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "da842d77-f7fd-4ff0-80fb-58924ce7f7a0",
      "name": "models",
      "item": [
        {
          "id": "b2c94788-a044-4598-a354-8ad61ba80cc3",
          "name": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
          "request": {
            "name": "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
            "description": {},
            "url": {
              "path": [
                "models"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "3ad200e1-1d37-4ece-b6b6-e2a7f5c6bffb",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "models"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"officia laboris\",\n      \"object\": \"model\",\n      \"created\": 38127503,\n      \"owned_by\": \"laborum in\"\n    },\n    {\n      \"id\": \"Ut\",\n      \"object\": \"model\",\n      \"created\": -56940282,\n      \"owned_by\": \"adipisicing\"\n    }\n  ]\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /models for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"model\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'owned_by' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].owned_by`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].owned_by`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].owned_by' has 'owned_by' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].owned_by`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].owned_by`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "bc85e118-93e5-4423-a786-499b3ea71013",
          "name": "{model}",
          "item": [
            {
              "id": "a3d3f419-2576-47c1-9ca4-7f3749e1247a",
              "name": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
              "request": {
                "name": "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
                "description": {},
                "url": {
                  "path": [
                    "models",
                    ":model"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{model}}",
                      "key": "model",
                      "description": "(Required) The ID of the model to use for this request"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "f3aa9e08-a255-432f-bdf7-0eeac249cbbe",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "models",
                        ":model"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{model}}",
                          "key": "model",
                          "description": "(Required) The ID of the model to use for this request"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"quis irure nostrud enim\",\n  \"object\": \"model\",\n  \"created\": -13453287,\n  \"owned_by\": \"qui sit elit do\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /models/:model for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"model\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'owned_by' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].owned_by`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].owned_by`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].owned_by' has 'owned_by' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].owned_by`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].owned_by`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "959f650a-5c66-40d1-82c7-6e4b7ecd0031",
              "name": "Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.",
              "request": {
                "name": "Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.",
                "description": {},
                "url": {
                  "path": [
                    "models",
                    ":model"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{model}}",
                      "key": "model",
                      "description": "(Required) The model to delete"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "50b12db0-1ffc-4ac4-af1c-503f2f4a2c84",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "models",
                        ":model"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{model}}",
                          "key": "model",
                          "description": "(Required) The model to delete"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"voluptate dolor exercitation\",\n  \"object\": \"amet proident\",\n  \"deleted\": false\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /models/:model for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(responseData[0], `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(pm.response.json(), `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "bda26ffe-9a63-4fe8-bcf3-e7b1363357f0",
      "name": "Classifies if text violates OpenAI's Content Policy",
      "request": {
        "name": "Classifies if text violates OpenAI's Content Policy",
        "description": {},
        "url": {
          "path": [
            "moderations"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"input\": \"{{input}}\",\n    \"model\": \"{{model}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "c8684d97-9ec6-48a1-99ec-61ca1d2b7068",
          "name": "OK",
          "originalRequest": {
            "url": {
              "path": [
                "moderations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: bearer",
                  "type": "text/plain"
                },
                "key": "Authorization",
                "value": "{{Authorization}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"input\": \"{{input}}\",\n    \"model\": \"{{model}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"id\": \"Lorem occaecat\",\n  \"model\": \"in commodo\",\n  \"results\": [\n    {\n      \"flagged\": true,\n      \"categories\": {\n        \"hate\": true,\n        \"hate/threatening\": false,\n        \"harassment\": false,\n        \"harassment/threatening\": false,\n        \"self-harm\": false,\n        \"self-harm/intent\": true,\n        \"self-harm/instructions\": true,\n        \"sexual\": true,\n        \"sexual/minors\": false,\n        \"violence\": false,\n        \"violence/graphic\": true\n      },\n      \"category_scores\": {\n        \"hate\": 59150042.99320209,\n        \"hate/threatening\": 7342347.8709603995,\n        \"harassment\": -17887568.12581025,\n        \"harassment/threatening\": -99195035.50645566,\n        \"self-harm\": 75392942.58805153,\n        \"self-harm/intent\": 24098463.55959168,\n        \"self-harm/instructions\": -85693563.623379,\n        \"sexual\": -18746582.313554943,\n        \"sexual/minors\": -48315758.95195055,\n        \"violence\": 87147211.50999397,\n        \"violence/graphic\": 55094990.42747742\n      }\n    },\n    {\n      \"flagged\": false,\n      \"categories\": {\n        \"hate\": true,\n        \"hate/threatening\": true,\n        \"harassment\": false,\n        \"harassment/threatening\": false,\n        \"self-harm\": true,\n        \"self-harm/intent\": false,\n        \"self-harm/instructions\": false,\n        \"sexual\": true,\n        \"sexual/minors\": false,\n        \"violence\": true,\n        \"violence/graphic\": false\n      },\n      \"category_scores\": {\n        \"hate\": 55298957.49775627,\n        \"hate/threatening\": 9570726.474510893,\n        \"harassment\": -57980454.568833426,\n        \"harassment/threatening\": -65969548.13699441,\n        \"self-harm\": 82924791.98818791,\n        \"self-harm/intent\": 41247195.05875713,\n        \"self-harm/instructions\": -34020714.37563974,\n        \"sexual\": -44765861.25963089,\n        \"sexual/minors\": -19391392.485154137,\n        \"violence\": 83652796.61123571,\n        \"violence/graphic\": 19786013.105729297\n      }\n    }\n  ]\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /moderations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(responseData[0], `model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(pm.response.json(), `model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `results` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`results`)){\n              if(pm.expect(_.get(responseData[0], `results`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `results`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `results` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`results`)){\n              if(pm.expect(_.get(pm.response.json(), `results`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `results`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the results field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`results`);\n          let resultsArray = _.get(pm.response.json(), `results`, \"\");\n          for (let results_it = 0; results_it < resultsArray.length; results_it++) {\n            let iterator = results_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'flagged' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].flagged`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].flagged`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].flagged' has 'flagged' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].flagged`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].flagged`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'categories' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories' has 'categories' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'hate' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.hate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.hate`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.hate' has 'hate' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.hate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.hate`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'hate/threatening' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.hate/threatening`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.hate/threatening`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.hate/threatening' has 'hate/threatening' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.hate/threatening`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.hate/threatening`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'harassment' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.harassment`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.harassment`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.harassment' has 'harassment' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.harassment`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.harassment`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'harassment/threatening' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.harassment/threatening`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.harassment/threatening`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.harassment/threatening' has 'harassment/threatening' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.harassment/threatening`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.harassment/threatening`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'self-harm' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.self-harm`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.self-harm`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.self-harm' has 'self-harm' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.self-harm`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.self-harm`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'self-harm/intent' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.self-harm/intent`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.self-harm/intent`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.self-harm/intent' has 'self-harm/intent' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.self-harm/intent`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.self-harm/intent`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'self-harm/instructions' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.self-harm/instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.self-harm/instructions`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.self-harm/instructions' has 'self-harm/instructions' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.self-harm/instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.self-harm/instructions`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'sexual' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.sexual`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.sexual`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.sexual' has 'sexual' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.sexual`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.sexual`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'sexual/minors' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.sexual/minors`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.sexual/minors`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.sexual/minors' has 'sexual/minors' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.sexual/minors`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.sexual/minors`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'violence' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.violence`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.violence`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.violence' has 'violence' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.violence`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.violence`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'violence/graphic' as 'boolean'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].categories.violence/graphic`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].categories.violence/graphic`, 200)).to.equal(\"boolean\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].categories.violence/graphic' has 'violence/graphic' as 'boolean'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].categories.violence/graphic`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].categories.violence/graphic`, 200)).to.equal(\"boolean\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'category_scores' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores' has 'category_scores' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'hate' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.hate`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.hate`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.hate' has 'hate' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.hate`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.hate`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'hate/threatening' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.hate/threatening`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.hate/threatening`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.hate/threatening' has 'hate/threatening' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.hate/threatening`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.hate/threatening`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'harassment' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.harassment`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.harassment`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.harassment' has 'harassment' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.harassment`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.harassment`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'harassment/threatening' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.harassment/threatening`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.harassment/threatening`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.harassment/threatening' has 'harassment/threatening' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.harassment/threatening`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.harassment/threatening`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'self-harm' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.self-harm`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.self-harm`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.self-harm' has 'self-harm' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.self-harm`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.self-harm`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'self-harm/intent' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.self-harm/intent`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.self-harm/intent`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.self-harm/intent' has 'self-harm/intent' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.self-harm/intent`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.self-harm/intent`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'self-harm/instructions' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.self-harm/instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.self-harm/instructions`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.self-harm/instructions' has 'self-harm/instructions' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.self-harm/instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.self-harm/instructions`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'sexual' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.sexual`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.sexual`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.sexual' has 'sexual' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.sexual`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.sexual`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'sexual/minors' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.sexual/minors`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.sexual/minors`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.sexual/minors' has 'sexual/minors' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.sexual/minors`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.sexual/minors`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'violence' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.violence`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.violence`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.violence' has 'violence' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.violence`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.violence`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'resultsArray' has 'violence/graphic' as 'number'`,function(){  \n          if(pm.expect(_.get(responseData[0], `results[${results_it}].category_scores.violence/graphic`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`results[${results_it}].category_scores.violence/graphic`, 200)).to.equal(\"number\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'results[${results_it}].category_scores.violence/graphic' has 'violence/graphic' as 'number'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `results[${results_it}].category_scores.violence/graphic`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`results[${results_it}].category_scores.violence/graphic`, 200)).to.equal(\"number\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "453b027a-3df4-4234-925a-0f921cfeef71",
      "name": "assistants",
      "item": [
        {
          "id": "473dcfe6-1eb2-46a9-a420-10b6b2096d36",
          "name": "Returns a list of assistants.",
          "request": {
            "name": "Returns a list of assistants.",
            "description": {},
            "url": {
              "path": [
                "assistants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "limit",
                  "value": "{{limit}}",
                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                },
                {
                  "disabled": false,
                  "key": "order",
                  "value": "{{order}}",
                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                },
                {
                  "disabled": false,
                  "key": "after",
                  "value": "{{after}}",
                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                },
                {
                  "disabled": false,
                  "key": "before",
                  "value": "{{before}}",
                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "5212b3c5-3f85-4860-a313-69e4a27daf8a",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "assistants"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "order",
                      "value": "{{order}}"
                    },
                    {
                      "key": "after",
                      "value": "{{after}}"
                    },
                    {
                      "key": "before",
                      "value": "{{before}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"do in nisi\",\n      \"object\": \"assistant\",\n      \"created_at\": -26978643,\n      \"name\": \"aliqua tempor magna ut\",\n      \"description\": \"anim dolor Duis quis non\",\n      \"model\": \"incididunt id\",\n      \"instructions\": \"sed quis sunt\",\n      \"metadata\": {}\n    },\n    {\n      \"id\": \"Duis sed officia\",\n      \"object\": \"assistant\",\n      \"created_at\": 70815525,\n      \"name\": \"nostrud dolore aute in\",\n      \"description\": \"in proident labore eu\",\n      \"model\": \"ut non amet in Excepteur\",\n      \"instructions\": \"p\",\n      \"metadata\": {}\n    }\n  ],\n  \"first_id\": \"asst_abc123\",\n  \"last_id\": \"asst_abc456\",\n  \"has_more\": false\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants?limit=20&order=desc&after=<string>&before=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"assistant\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].name`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].name`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].name`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].name`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('data[${data_it}].name length to be atmost `256`',function(){\n          pm.expect(_.get(responseData, \"data[${data_it}].name\", \"\").length).to.be.at.most(256);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'description' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].description`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].description`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].description' has 'description' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].description`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].description`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('data[${data_it}].description length to be atmost `512`',function(){\n          pm.expect(_.get(responseData, \"data[${data_it}].description\", \"\").length).to.be.at.most(512);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'model' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].model' has 'model' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'instructions' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].instructions`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].instructions' has 'instructions' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].instructions`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('data[${data_it}].instructions length to be atmost `32768`',function(){\n          pm.expect(_.get(responseData, \"data[${data_it}].instructions\", \"\").length).to.be.at.most(32768);\n        })\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'dataArray' has 'tools' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].tools`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data[${data_it}].tools`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'dataArray' has 'tools' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].tools`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data[${data_it}].tools`))).to.equal(true);\n              }\n          })\n        }\n        \n\n  \n        pm.test('data[${data_it}].tools length to be atmost `128`',function(){\n            pm.expect(_.get(responseData, \"data[${data_it}].tools\", \"\").length).to.be.at.most(128);\n        })\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'dataArray' has 'file_ids' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].file_ids`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data[${data_it}].file_ids`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'dataArray' has 'file_ids' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].file_ids`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data[${data_it}].file_ids`))).to.equal(true);\n              }\n          })\n        }\n        \n\n  \n        pm.test('data[${data_it}].file_ids length to be atmost `20`',function(){\n            pm.expect(_.get(responseData, \"data[${data_it}].file_ids\", \"\").length).to.be.at.most(20);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'metadata' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].metadata`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].metadata' has 'metadata' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].metadata`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `first_id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`first_id`)){\n          if(pm.expect(_.get(responseData[0], `first_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `first_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `first_id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`first_id`)){\n          if(pm.expect(_.get(pm.response.json(), `first_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `first_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `last_id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`last_id`)){\n          if(pm.expect(_.get(responseData[0], `last_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `last_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `last_id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`last_id`)){\n          if(pm.expect(_.get(pm.response.json(), `last_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `last_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(responseData[0], `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(pm.response.json(), `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "452256f7-9107-466e-8280-0dfe3cd34bc6",
          "name": "Create an assistant with a model and instructions.",
          "request": {
            "name": "Create an assistant with a model and instructions.",
            "description": {},
            "url": {
              "path": [
                "assistants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"model\": \"{{model}}\",\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"instructions\": \"{{instructions}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "52a826b7-f89b-4fb0-b58b-f00889b7e20b",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "assistants"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"model\": \"{{model}}\",\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"instructions\": \"{{instructions}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"in aliquip Ex\",\n  \"object\": \"assistant\",\n  \"created_at\": 27274200,\n  \"name\": \"fugiat culpa cupidatat magna qui\",\n  \"description\": \"labore dolor\",\n  \"model\": \"sint nulla consequat magna\",\n  \"instructions\": \"velit labore deserunt\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {}\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"assistant\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('name length to be atmost `256`',function(){\n          pm.expect(_.get(responseData, \"name\", \"\").length).to.be.at.most(256);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(responseData[0], `description`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `description`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(pm.response.json(), `description`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `description`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('description length to be atmost `512`',function(){\n          pm.expect(_.get(responseData, \"description\", \"\").length).to.be.at.most(512);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(responseData[0], `model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(pm.response.json(), `model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `instructions` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`instructions`)){\n          if(pm.expect(_.get(responseData[0], `instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `instructions`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `instructions` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`instructions`)){\n          if(pm.expect(_.get(pm.response.json(), `instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `instructions`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('instructions length to be atmost `32768`',function(){\n          pm.expect(_.get(responseData, \"instructions\", \"\").length).to.be.at.most(32768);\n        })\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tools` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tools`)){\n              if(pm.expect(_.get(responseData[0], `tools`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tools`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tools` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tools`)){\n              if(pm.expect(_.get(pm.response.json(), `tools`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tools`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n  \n        pm.test('tools length to be atmost `128`',function(){\n            pm.expect(_.get(responseData, \"tools\", \"\").length).to.be.at.most(128);\n        })\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `file_ids` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`file_ids`)){\n              if(pm.expect(_.get(responseData[0], `file_ids`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `file_ids`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `file_ids` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`file_ids`)){\n              if(pm.expect(_.get(pm.response.json(), `file_ids`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `file_ids`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n  \n        pm.test('file_ids length to be atmost `20`',function(){\n            pm.expect(_.get(responseData, \"file_ids\", \"\").length).to.be.at.most(20);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "e115b034-96bf-4e88-a371-a6381b9ec7a7",
          "name": "{assistant_id}",
          "item": [
            {
              "id": "351b6bb8-2119-4635-8b27-5d6a3a62772e",
              "name": "Retrieves an assistant.",
              "request": {
                "name": "Retrieves an assistant.",
                "description": {},
                "url": {
                  "path": [
                    "assistants",
                    ":assistant_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{assistant_id}}",
                      "key": "assistant_id",
                      "description": "(Required) The ID of the assistant to retrieve."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "05563b66-e8b1-440d-957f-0fddd9d57c05",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "assistants",
                        ":assistant_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{assistant_id}}",
                          "key": "assistant_id",
                          "description": "(Required) The ID of the assistant to retrieve."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"in aliquip Ex\",\n  \"object\": \"assistant\",\n  \"created_at\": 27274200,\n  \"name\": \"fugiat culpa cupidatat magna qui\",\n  \"description\": \"labore dolor\",\n  \"model\": \"sint nulla consequat magna\",\n  \"instructions\": \"velit labore deserunt\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {}\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants/:assistant_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"assistant\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].name`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].name`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].name`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].name`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('data[${data_it}].name length to be atmost `256`',function(){\n          pm.expect(_.get(responseData, \"data[${data_it}].name\", \"\").length).to.be.at.most(256);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'description' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].description`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].description`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].description' has 'description' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].description`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].description`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('data[${data_it}].description length to be atmost `512`',function(){\n          pm.expect(_.get(responseData, \"data[${data_it}].description\", \"\").length).to.be.at.most(512);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'model' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].model' has 'model' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].model`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'instructions' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].instructions`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].instructions' has 'instructions' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].instructions`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('data[${data_it}].instructions length to be atmost `32768`',function(){\n          pm.expect(_.get(responseData, \"data[${data_it}].instructions\", \"\").length).to.be.at.most(32768);\n        })\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'dataArray' has 'tools' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].tools`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data[${data_it}].tools`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'dataArray' has 'tools' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].tools`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data[${data_it}].tools`))).to.equal(true);\n              }\n          })\n        }\n        \n\n  \n        pm.test('data[${data_it}].tools length to be atmost `128`',function(){\n            pm.expect(_.get(responseData, \"data[${data_it}].tools\", \"\").length).to.be.at.most(128);\n        })\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'dataArray' has 'file_ids' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].file_ids`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data[${data_it}].file_ids`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'dataArray' has 'file_ids' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].file_ids`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data[${data_it}].file_ids`))).to.equal(true);\n              }\n          })\n        }\n        \n\n  \n        pm.test('data[${data_it}].file_ids length to be atmost `20`',function(){\n            pm.expect(_.get(responseData, \"data[${data_it}].file_ids\", \"\").length).to.be.at.most(20);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'metadata' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].metadata`, 200)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].metadata' has 'metadata' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].metadata`, 200)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `first_id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`first_id`)){\n          if(pm.expect(_.get(responseData[0], `first_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `first_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `first_id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`first_id`)){\n          if(pm.expect(_.get(pm.response.json(), `first_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `first_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `last_id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`last_id`)){\n          if(pm.expect(_.get(responseData[0], `last_id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `last_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `last_id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`last_id`)){\n          if(pm.expect(_.get(pm.response.json(), `last_id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `last_id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(responseData[0], `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `has_more` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`has_more`)){\n          if(pm.expect(_.get(pm.response.json(), `has_more`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `has_more`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a77c8f46-f5a5-4e6e-8073-14c7d3b639b2",
              "name": "Modifies an assistant.",
              "request": {
                "name": "Modifies an assistant.",
                "description": {},
                "url": {
                  "path": [
                    "assistants",
                    ":assistant_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{assistant_id}}",
                      "key": "assistant_id",
                      "description": "(Required) The ID of the assistant to modify."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"model\": \"{{model}}\",\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"instructions\": \"{{instructions}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "5c58ccda-c282-4a49-908c-25caf606b639",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "assistants",
                        ":assistant_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{assistant_id}}",
                          "key": "assistant_id",
                          "description": "(Required) The ID of the assistant to modify."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"model\": \"{{model}}\",\n    \"name\": \"{{name}}\",\n    \"description\": \"{{description}}\",\n    \"instructions\": \"{{instructions}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"in aliquip Ex\",\n  \"object\": \"assistant\",\n  \"created_at\": 27274200,\n  \"name\": \"fugiat culpa cupidatat magna qui\",\n  \"description\": \"labore dolor\",\n  \"model\": \"sint nulla consequat magna\",\n  \"instructions\": \"velit labore deserunt\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {}\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants/:assistant_id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"assistant\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('name length to be atmost `256`',function(){\n          pm.expect(_.get(responseData, \"name\", \"\").length).to.be.at.most(256);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(responseData[0], `description`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `description`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `description` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`description`)){\n          if(pm.expect(_.get(pm.response.json(), `description`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `description`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('description length to be atmost `512`',function(){\n          pm.expect(_.get(responseData, \"description\", \"\").length).to.be.at.most(512);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(responseData[0], `model`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `model` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`model`)){\n          if(pm.expect(_.get(pm.response.json(), `model`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `model`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `instructions` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`instructions`)){\n          if(pm.expect(_.get(responseData[0], `instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `instructions`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `instructions` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`instructions`)){\n          if(pm.expect(_.get(pm.response.json(), `instructions`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `instructions`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('instructions length to be atmost `32768`',function(){\n          pm.expect(_.get(responseData, \"instructions\", \"\").length).to.be.at.most(32768);\n        })\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tools` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tools`)){\n              if(pm.expect(_.get(responseData[0], `tools`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tools`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tools` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tools`)){\n              if(pm.expect(_.get(pm.response.json(), `tools`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tools`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n  \n        pm.test('tools length to be atmost `128`',function(){\n            pm.expect(_.get(responseData, \"tools\", \"\").length).to.be.at.most(128);\n        })\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `file_ids` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`file_ids`)){\n              if(pm.expect(_.get(responseData[0], `file_ids`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `file_ids`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `file_ids` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`file_ids`)){\n              if(pm.expect(_.get(pm.response.json(), `file_ids`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `file_ids`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n  \n        pm.test('file_ids length to be atmost `20`',function(){\n            pm.expect(_.get(responseData, \"file_ids\", \"\").length).to.be.at.most(20);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "c5454068-6b51-49aa-aa4a-6280035e14c6",
              "name": "Delete an assistant.",
              "request": {
                "name": "Delete an assistant.",
                "description": {},
                "url": {
                  "path": [
                    "assistants",
                    ":assistant_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{assistant_id}}",
                      "key": "assistant_id",
                      "description": "(Required) The ID of the assistant to delete."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "a62e99f6-ce33-4af9-b4b5-640d12cfbb7a",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "assistants",
                        ":assistant_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{assistant_id}}",
                          "key": "assistant_id",
                          "description": "(Required) The ID of the assistant to delete."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"nulla\",\n  \"object\": \"assistant.deleted\",\n  \"deleted\": false\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants/:assistant_id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(responseData[0], `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(pm.response.json(), `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"assistant.deleted\"]);\n        })\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "52ea6495-019e-45dd-9549-7510be9ca283",
              "name": "files",
              "item": [
                {
                  "id": "b2c31c02-1d5a-49ca-b5bb-806f00d73dfc",
                  "name": "Returns a list of assistant files.",
                  "request": {
                    "name": "Returns a list of assistant files.",
                    "description": {},
                    "url": {
                      "path": [
                        "assistants",
                        ":assistant_id",
                        "files"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "disabled": false,
                          "key": "limit",
                          "value": "{{limit}}",
                          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                        },
                        {
                          "disabled": false,
                          "key": "order",
                          "value": "{{order}}",
                          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                        },
                        {
                          "disabled": false,
                          "key": "after",
                          "value": "{{after}}",
                          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                        },
                        {
                          "disabled": false,
                          "key": "before",
                          "value": "{{before}}",
                          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{assistant_id}}",
                          "key": "assistant_id",
                          "description": "(Required) The ID of the assistant the file belongs to."
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "8dedeb29-f433-4865-8736-25e7a84cd4fd",
                      "name": "OK",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "assistants",
                            ":assistant_id",
                            "files"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "limit",
                              "value": "{{limit}}"
                            },
                            {
                              "key": "order",
                              "value": "{{order}}"
                            },
                            {
                              "key": "after",
                              "value": "{{after}}"
                            },
                            {
                              "key": "before",
                              "value": "{{before}}"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{assistant_id}}",
                              "key": "assistant_id",
                              "description": "(Required) The ID of the assistant the file belongs to."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: bearer",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"in veniam irure\",\n      \"object\": \"assistant.file\",\n      \"created_at\": -76686384,\n      \"assistant_id\": \"in Duis non\"\n    },\n    {\n      \"id\": \"dolor\",\n      \"object\": \"assistant.file\",\n      \"created_at\": 67999836,\n      \"assistant_id\": \"nulla enim\"\n    }\n  ],\n  \"first_id\": \"file-abc123\",\n  \"last_id\": \"file-abc456\",\n  \"has_more\": false,\n  \"items\": true\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants/:assistant_id/files?limit=20&order=desc&after=<string>&before=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'filename' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].filename' has 'filename' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'purpose' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].purpose' has 'purpose' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status_details' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status_details' has 'status_details' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "d6441ffa-f405-4b84-a190-8ba976cb78ff",
                  "name": "Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).",
                  "request": {
                    "name": "Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).",
                    "description": {},
                    "url": {
                      "path": [
                        "assistants",
                        ":assistant_id",
                        "files"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{assistant_id}}",
                          "key": "assistant_id",
                          "description": "(Required) The ID of the assistant for which to create a File.\n"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "auth": null,
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"file_id\": \"{{file_id}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "73205451-ad6c-4525-a597-aeb01a3019f7",
                      "name": "OK",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "assistants",
                            ":assistant_id",
                            "files"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{assistant_id}}",
                              "key": "assistant_id",
                              "description": "(Required) The ID of the assistant for which to create a File.\n"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: bearer",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"file_id\": \"{{file_id}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"id\": \"reprehenderit ullamco cillum Duis velit\",\n  \"object\": \"assistant.file\",\n  \"created_at\": 30689555,\n  \"assistant_id\": \"magna Lorem\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants/:assistant_id/files for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `bytes` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`bytes`)){\n                  if(pm.expect(_.get(responseData[0], `bytes`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `bytes`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `bytes` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`bytes`)){\n                if(pm.expect(_.get(responseData, `bytes`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `bytes`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `filename` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`filename`)){\n          if(pm.expect(_.get(responseData[0], `filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `filename`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `filename` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`filename`)){\n          if(pm.expect(_.get(pm.response.json(), `filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `filename`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `purpose` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`purpose`)){\n          if(pm.expect(_.get(responseData[0], `purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `purpose`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `purpose` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`purpose`)){\n          if(pm.expect(_.get(pm.response.json(), `purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `purpose`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status_details` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status_details`)){\n          if(pm.expect(_.get(responseData[0], `status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status_details`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status_details` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status_details`)){\n          if(pm.expect(_.get(pm.response.json(), `status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status_details`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "399d5a94-2664-4944-832f-53ae7223546d",
                  "name": "{file_id}",
                  "item": [
                    {
                      "id": "24690f4c-836a-4a5c-a081-0092457f776f",
                      "name": "Retrieves an AssistantFile.",
                      "request": {
                        "name": "Retrieves an AssistantFile.",
                        "description": {},
                        "url": {
                          "path": [
                            "assistants",
                            ":assistant_id",
                            "files",
                            ":file_id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{assistant_id}}",
                              "key": "assistant_id",
                              "description": "(Required) The ID of the assistant who the file belongs to."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{file_id}}",
                              "key": "file_id",
                              "description": "(Required) The ID of the file we're getting."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": null
                      },
                      "response": [
                        {
                          "id": "54c0150c-f2fc-4c56-a7dc-56f7f776302a",
                          "name": "OK",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "assistants",
                                ":assistant_id",
                                "files",
                                ":file_id"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{assistant_id}}",
                                  "key": "assistant_id",
                                  "description": "(Required) The ID of the assistant who the file belongs to."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{file_id}}",
                                  "key": "file_id",
                                  "description": "(Required) The ID of the file we're getting."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: bearer",
                                  "type": "text/plain"
                                },
                                "key": "Authorization",
                                "value": "{{Authorization}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"id\": \"reprehenderit ullamco cillum Duis velit\",\n  \"object\": \"assistant.file\",\n  \"created_at\": 30689555,\n  \"assistant_id\": \"magna Lorem\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants/:assistant_id/files/:file_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'filename' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].filename' has 'filename' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'purpose' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].purpose' has 'purpose' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status_details' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status_details' has 'status_details' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "9f5c0cc6-ed7c-4002-8231-489813a15ce9",
                      "name": "Delete an assistant file.",
                      "request": {
                        "name": "Delete an assistant file.",
                        "description": {},
                        "url": {
                          "path": [
                            "assistants",
                            ":assistant_id",
                            "files",
                            ":file_id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{assistant_id}}",
                              "key": "assistant_id",
                              "description": "(Required) The ID of the assistant that the file belongs to."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{file_id}}",
                              "key": "file_id",
                              "description": "(Required) The ID of the file to delete."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "auth": null
                      },
                      "response": [
                        {
                          "id": "d3db6437-8bdd-40e7-b36d-b349e7895257",
                          "name": "OK",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "assistants",
                                ":assistant_id",
                                "files",
                                ":file_id"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{assistant_id}}",
                                  "key": "assistant_id",
                                  "description": "(Required) The ID of the assistant that the file belongs to."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{file_id}}",
                                  "key": "file_id",
                                  "description": "(Required) The ID of the file to delete."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: bearer",
                                  "type": "text/plain"
                                },
                                "key": "Authorization",
                                "value": "{{Authorization}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "DELETE",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"id\": \"ut\",\n  \"object\": \"assistant.file.deleted\",\n  \"deleted\": false\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /assistants/:assistant_id/files/:file_id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(responseData[0], `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(pm.response.json(), `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "ee4424e0-4dae-4f51-8e1b-d590e5b2126d",
      "name": "threads",
      "item": [
        {
          "id": "31839a47-5ac2-4cce-8922-4cf97cfbf9ea",
          "name": "Create a thread.",
          "request": {
            "name": "Create a thread.",
            "description": {},
            "url": {
              "path": [
                "threads"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"messages\": \"{{messages}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "cc215b36-81f0-4f3c-8015-343d09b8c978",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "threads"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"messages\": \"{{messages}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"al\",\n  \"object\": \"thread\",\n  \"created_at\": 94999646,\n  \"metadata\": {}\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "18edc1c4-ec06-42b6-bcb1-6d6d2d940b68",
          "name": "{thread_id}",
          "item": [
            {
              "id": "bf2d027e-6e96-4ae0-9f15-25abf7ee80ff",
              "name": "Retrieves a thread.",
              "request": {
                "name": "Retrieves a thread.",
                "description": {},
                "url": {
                  "path": [
                    "threads",
                    ":thread_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{thread_id}}",
                      "key": "thread_id",
                      "description": "(Required) The ID of the thread to retrieve."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "4989aca6-d49a-4152-8329-6e037aa52df8",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "threads",
                        ":thread_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{thread_id}}",
                          "key": "thread_id",
                          "description": "(Required) The ID of the thread to retrieve."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"al\",\n  \"object\": \"thread\",\n  \"created_at\": 94999646,\n  \"metadata\": {}\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "410128aa-5d5f-4b43-bcac-f28537d8856c",
              "name": "Modifies a thread.",
              "request": {
                "name": "Modifies a thread.",
                "description": {},
                "url": {
                  "path": [
                    "threads",
                    ":thread_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{thread_id}}",
                      "key": "thread_id",
                      "description": "(Required) The ID of the thread to modify. Only the `metadata` can be modified."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": null,
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"metadata\": \"{{metadata}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "9a433d03-3142-468b-a780-52eabb850451",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "threads",
                        ":thread_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{thread_id}}",
                          "key": "thread_id",
                          "description": "(Required) The ID of the thread to modify. Only the `metadata` can be modified."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"metadata\": \"{{metadata}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"al\",\n  \"object\": \"thread\",\n  \"created_at\": 94999646,\n  \"metadata\": {}\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "8a057414-3ccc-4159-aba7-84c6717fc5de",
              "name": "Delete a thread.",
              "request": {
                "name": "Delete a thread.",
                "description": {},
                "url": {
                  "path": [
                    "threads",
                    ":thread_id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{thread_id}}",
                      "key": "thread_id",
                      "description": "(Required) The ID of the thread to delete."
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "27641390-3960-4b44-8b76-efe09e31d8e5",
                  "name": "OK",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "threads",
                        ":thread_id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{thread_id}}",
                          "key": "thread_id",
                          "description": "(Required) The ID of the thread to delete."
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: bearer",
                          "type": "text/plain"
                        },
                        "key": "Authorization",
                        "value": "{{Authorization}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"id\": \"laborum\",\n  \"object\": \"thread.deleted\",\n  \"deleted\": false\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(responseData[0], `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deleted` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deleted`)){\n          if(pm.expect(_.get(pm.response.json(), `deleted`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deleted`, 200)).to.equal(\"boolean\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread.deleted\"]);\n        })\n});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "e36f7484-fdf6-4e12-9369-9a8e6d9a37cb",
              "name": "messages",
              "item": [
                {
                  "id": "8a88f71f-9dc3-4e2f-81eb-65a9a987f4df",
                  "name": "Returns a list of messages for a given thread.",
                  "request": {
                    "name": "Returns a list of messages for a given thread.",
                    "description": {},
                    "url": {
                      "path": [
                        "threads",
                        ":thread_id",
                        "messages"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "disabled": false,
                          "key": "limit",
                          "value": "{{limit}}",
                          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                        },
                        {
                          "disabled": false,
                          "key": "order",
                          "value": "{{order}}",
                          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                        },
                        {
                          "disabled": false,
                          "key": "after",
                          "value": "{{after}}",
                          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                        },
                        {
                          "disabled": false,
                          "key": "before",
                          "value": "{{before}}",
                          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{thread_id}}",
                          "key": "thread_id",
                          "description": "(Required) The ID of the [thread](/docs/api-reference/threads) the messages belong to."
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "9df31d2e-8225-41b3-b350-91ad60a21f7f",
                      "name": "OK",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "messages"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "limit",
                              "value": "{{limit}}"
                            },
                            {
                              "key": "order",
                              "value": "{{order}}"
                            },
                            {
                              "key": "after",
                              "value": "{{after}}"
                            },
                            {
                              "key": "before",
                              "value": "{{before}}"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the [thread](/docs/api-reference/threads) the messages belong to."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: bearer",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"officia ullamco laboris\",\n      \"object\": \"thread.message\",\n      \"created_at\": 93504200,\n      \"thread_id\": \"non officia\",\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"image_file\",\n          \"image_file\": {\n            \"file_id\": \"laboris mollit\"\n          }\n        },\n        {\n          \"type\": \"image_file\",\n          \"image_file\": {\n            \"file_id\": \"dolor elit dolore\"\n          }\n        }\n      ],\n      \"assistant_id\": \"pariatur se\",\n      \"run_id\": \"consequat eiusmod et\",\n      \"metadata\": {}\n    },\n    {\n      \"id\": \"mollit\",\n      \"object\": \"thread.message\",\n      \"created_at\": -94542790,\n      \"thread_id\": \"aliqua cupidatat ex Lorem occaecat\",\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"image_file\",\n          \"image_file\": {\n            \"file_id\": \"id reprehenderit nisi\"\n          }\n        },\n        {\n          \"type\": \"image_file\",\n          \"image_file\": {\n            \"file_id\": \"anim nisi laborum do ut\"\n          }\n        }\n      ],\n      \"assistant_id\": \"eu adipisicing do\",\n      \"run_id\": \"amet cillum\",\n      \"metadata\": {}\n    }\n  ],\n  \"first_id\": \"msg_abc123\",\n  \"last_id\": \"msg_abc123\",\n  \"has_more\": false\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/messages?limit=20&order=desc&after=<string>&before=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "6c0caa8f-e2dd-462f-9691-86c5d68ec32d",
                  "name": "Create a message.",
                  "request": {
                    "name": "Create a message.",
                    "description": {},
                    "url": {
                      "path": [
                        "threads",
                        ":thread_id",
                        "messages"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{thread_id}}",
                          "key": "thread_id",
                          "description": "(Required) The ID of the [thread](/docs/api-reference/threads) to create a message for."
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "auth": null,
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"role\": \"{{role}}\",\n    \"content\": \"{{content}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "71b74975-89a8-4548-8e6a-249b9940311d",
                      "name": "OK",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "messages"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the [thread](/docs/api-reference/threads) to create a message for."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: bearer",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"role\": \"{{role}}\",\n    \"content\": \"{{content}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"id\": \"dolore consectetur commodo minim laboris\",\n  \"object\": \"thread.message\",\n  \"created_at\": 81952520,\n  \"thread_id\": \"consequat cupidatat aute\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"image_file\",\n      \"image_file\": {\n        \"file_id\": \"occae\"\n      }\n    },\n    {\n      \"type\": \"image_file\",\n      \"image_file\": {\n        \"file_id\": \"dolore sed labore fugiat\"\n      }\n    }\n  ],\n  \"assistant_id\": \"cupidatat quis\",\n  \"run_id\": \"sit proident in\",\n  \"file_ids\": [],\n  \"metadata\": {}\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/messages for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "4c438302-a3bd-42f5-a20f-889c4a83ec0b",
                  "name": "{message_id}",
                  "item": [
                    {
                      "id": "63fea9d1-826a-40f1-acd6-b915f34eaf6d",
                      "name": "Retrieve a message.",
                      "request": {
                        "name": "Retrieve a message.",
                        "description": {},
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "messages",
                            ":message_id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the [thread](/docs/api-reference/threads) to which this message belongs."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{message_id}}",
                              "key": "message_id",
                              "description": "(Required) The ID of the message to retrieve."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": null
                      },
                      "response": [
                        {
                          "id": "909ab863-06ab-4892-8f2e-295e21776b84",
                          "name": "OK",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "messages",
                                ":message_id"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the [thread](/docs/api-reference/threads) to which this message belongs."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{message_id}}",
                                  "key": "message_id",
                                  "description": "(Required) The ID of the message to retrieve."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: bearer",
                                  "type": "text/plain"
                                },
                                "key": "Authorization",
                                "value": "{{Authorization}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"id\": \"dolore consectetur commodo minim laboris\",\n  \"object\": \"thread.message\",\n  \"created_at\": 81952520,\n  \"thread_id\": \"consequat cupidatat aute\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"image_file\",\n      \"image_file\": {\n        \"file_id\": \"occae\"\n      }\n    },\n    {\n      \"type\": \"image_file\",\n      \"image_file\": {\n        \"file_id\": \"dolore sed labore fugiat\"\n      }\n    }\n  ],\n  \"assistant_id\": \"cupidatat quis\",\n  \"run_id\": \"sit proident in\",\n  \"file_ids\": [],\n  \"metadata\": {}\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/messages/:message_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "7b026cb4-1eb9-4fa2-8c13-258966e48747",
                      "name": "Modifies a message.",
                      "request": {
                        "name": "Modifies a message.",
                        "description": {},
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "messages",
                            ":message_id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the thread to which this message belongs."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{message_id}}",
                              "key": "message_id",
                              "description": "(Required) The ID of the message to modify."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"metadata\": \"{{metadata}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "27c83df6-578e-4df6-a7b0-ede4437363eb",
                          "name": "OK",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "messages",
                                ":message_id"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the thread to which this message belongs."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{message_id}}",
                                  "key": "message_id",
                                  "description": "(Required) The ID of the message to modify."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: bearer",
                                  "type": "text/plain"
                                },
                                "key": "Authorization",
                                "value": "{{Authorization}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"metadata\": \"{{metadata}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"id\": \"dolore consectetur commodo minim laboris\",\n  \"object\": \"thread.message\",\n  \"created_at\": 81952520,\n  \"thread_id\": \"consequat cupidatat aute\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"image_file\",\n      \"image_file\": {\n        \"file_id\": \"occae\"\n      }\n    },\n    {\n      \"type\": \"image_file\",\n      \"image_file\": {\n        \"file_id\": \"dolore sed labore fugiat\"\n      }\n    }\n  ],\n  \"assistant_id\": \"cupidatat quis\",\n  \"run_id\": \"sit proident in\",\n  \"file_ids\": [],\n  \"metadata\": {}\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/messages/:message_id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "3b5c40fc-3423-4448-8e58-0a886cd2c086",
                      "name": "files",
                      "item": [
                        {
                          "id": "26aaa014-d63c-4972-9e5c-5944b5190a94",
                          "name": "Returns a list of message files.",
                          "request": {
                            "name": "Returns a list of message files.",
                            "description": {},
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "messages",
                                ":message_id",
                                "files"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "disabled": false,
                                  "key": "limit",
                                  "value": "{{limit}}",
                                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                                },
                                {
                                  "disabled": false,
                                  "key": "order",
                                  "value": "{{order}}",
                                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                                },
                                {
                                  "disabled": false,
                                  "key": "after",
                                  "value": "{{after}}",
                                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                                },
                                {
                                  "disabled": false,
                                  "key": "before",
                                  "value": "{{before}}",
                                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the thread that the message and files belong to."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{message_id}}",
                                  "key": "message_id",
                                  "description": "(Required) The ID of the message that the files belongs to."
                                }
                              ]
                            },
                            "header": [
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "auth": null
                          },
                          "response": [
                            {
                              "id": "a5910e25-2a89-4819-8128-5187ae8eb57b",
                              "name": "OK",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "threads",
                                    ":thread_id",
                                    "messages",
                                    ":message_id",
                                    "files"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [
                                    {
                                      "key": "limit",
                                      "value": "{{limit}}"
                                    },
                                    {
                                      "key": "order",
                                      "value": "{{order}}"
                                    },
                                    {
                                      "key": "after",
                                      "value": "{{after}}"
                                    },
                                    {
                                      "key": "before",
                                      "value": "{{before}}"
                                    }
                                  ],
                                  "variable": [
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{thread_id}}",
                                      "key": "thread_id",
                                      "description": "(Required) The ID of the thread that the message and files belong to."
                                    },
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{message_id}}",
                                      "key": "message_id",
                                      "description": "(Required) The ID of the message that the files belongs to."
                                    }
                                  ]
                                },
                                "header": [
                                  {
                                    "description": {
                                      "content": "Added as a part of security scheme: bearer",
                                      "type": "text/plain"
                                    },
                                    "key": "Authorization",
                                    "value": "{{Authorization}}"
                                  },
                                  {
                                    "key": "Accept",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "GET",
                                "body": {}
                              },
                              "status": "OK",
                              "code": 200,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"ipsum ex\",\n      \"object\": \"thread.message.file\",\n      \"created_at\": 71152369,\n      \"message_id\": \"aliquip magna laborum\"\n    },\n    {\n      \"id\": \"officia nostrud\",\n      \"object\": \"thread.message.file\",\n      \"created_at\": -82589450,\n      \"message_id\": \"ut sed consec\"\n    }\n  ],\n  \"first_id\": \"file-abc123\",\n  \"last_id\": \"file-abc456\",\n  \"has_more\": false,\n  \"items\": 70602884\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/messages/:message_id/files?limit=20&order=desc&after=<string>&before=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'filename' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].filename' has 'filename' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'purpose' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].purpose' has 'purpose' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status_details' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status_details' has 'status_details' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "protocolProfileBehavior": {
                            "disableBodyPruning": true
                          }
                        },
                        {
                          "id": "f08a218c-65b3-49cc-af08-904a073be715",
                          "name": "Retrieves a message file.",
                          "request": {
                            "name": "Retrieves a message file.",
                            "description": {},
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "messages",
                                ":message_id",
                                "files",
                                ":file_id"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the thread to which the message and File belong."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{message_id}}",
                                  "key": "message_id",
                                  "description": "(Required) The ID of the message the file belongs to."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{file_id}}",
                                  "key": "file_id",
                                  "description": "(Required) The ID of the file being retrieved."
                                }
                              ]
                            },
                            "header": [
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "auth": null
                          },
                          "response": [
                            {
                              "id": "0592af6e-0d66-4d6a-9bf4-6f10891e578a",
                              "name": "OK",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "threads",
                                    ":thread_id",
                                    "messages",
                                    ":message_id",
                                    "files",
                                    ":file_id"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": [
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{thread_id}}",
                                      "key": "thread_id",
                                      "description": "(Required) The ID of the thread to which the message and File belong."
                                    },
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{message_id}}",
                                      "key": "message_id",
                                      "description": "(Required) The ID of the message the file belongs to."
                                    },
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{file_id}}",
                                      "key": "file_id",
                                      "description": "(Required) The ID of the file being retrieved."
                                    }
                                  ]
                                },
                                "header": [
                                  {
                                    "description": {
                                      "content": "Added as a part of security scheme: bearer",
                                      "type": "text/plain"
                                    },
                                    "key": "Authorization",
                                    "value": "{{Authorization}}"
                                  },
                                  {
                                    "key": "Accept",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "GET",
                                "body": {}
                              },
                              "status": "OK",
                              "code": 200,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n  \"id\": \"dolor i\",\n  \"object\": \"thread.message.file\",\n  \"created_at\": -91386138,\n  \"message_id\": \"dolore ut non reprehenderit\"\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/messages/:message_id/files/:file_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(responseData[0], `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `data`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `data` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`data`)){\n              if(pm.expect(_.get(pm.response.json(), `data`, 200)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `data`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the data field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`data`);\n          let dataArray = _.get(pm.response.json(), `data`, \"\");\n          for (let data_it = 0; data_it < dataArray.length; data_it++) {\n            let iterator = data_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].id`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'bytes' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].bytes`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].bytes`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n          if(Array.isArray(responseData)) {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(responseData[0], `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(responseData[0],`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n                \n            })\n          } else {\n            pm.test(`${iterator} element of array 'dataArray'has 'created_at' as number`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `data[${data_it}].created_at`, 200)).to.exist){\n                pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].created_at`, 200)).to.equal(\"number\");\n              }  \n            })\n\n          }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'filename' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].filename' has 'filename' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].filename`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].filename`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'object' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].object' has 'object' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].object`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].object\", \"\")).to.include.oneOf([\"file\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'purpose' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].purpose' has 'purpose' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].purpose`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].purpose`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].purpose to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].purpose\", \"\")).to.include.oneOf([\"fine-tune\",\"fine-tune-results\",\"assistants\",\"assistants_output\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('data[${data_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"data[${data_it}].status\", \"\")).to.include.oneOf([\"uploaded\",\"processed\",\"error\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'dataArray' has 'status_details' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'data[${data_it}].status_details' has 'status_details' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `data[${data_it}].status_details`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`data[${data_it}].status_details`, 200)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n          }\n\n      })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"list\"]);\n        })\n});\n}\n"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "protocolProfileBehavior": {
                            "disableBodyPruning": true
                          }
                        }
                      ],
                      "event": []
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            },
            {
              "id": "84ab456a-906f-4493-b8b4-a98230c5470a",
              "name": "runs",
              "item": [
                {
                  "id": "8a063e5a-afc6-436e-916c-e5b1e0956210",
                  "name": "Returns a list of runs belonging to a thread.",
                  "request": {
                    "name": "Returns a list of runs belonging to a thread.",
                    "description": {},
                    "url": {
                      "path": [
                        "threads",
                        ":thread_id",
                        "runs"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "disabled": false,
                          "key": "limit",
                          "value": "{{limit}}",
                          "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                        },
                        {
                          "disabled": false,
                          "key": "order",
                          "value": "{{order}}",
                          "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                        },
                        {
                          "disabled": false,
                          "key": "after",
                          "value": "{{after}}",
                          "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                        },
                        {
                          "disabled": false,
                          "key": "before",
                          "value": "{{before}}",
                          "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                        }
                      ],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{thread_id}}",
                          "key": "thread_id",
                          "description": "(Required) The ID of the thread the run belongs to."
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": null
                  },
                  "response": [
                    {
                      "id": "9be37e89-c1eb-498a-84bb-c5c4bdc99c1a",
                      "name": "OK",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "runs"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "key": "limit",
                              "value": "{{limit}}"
                            },
                            {
                              "key": "order",
                              "value": "{{order}}"
                            },
                            {
                              "key": "after",
                              "value": "{{after}}"
                            },
                            {
                              "key": "before",
                              "value": "{{before}}"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the thread the run belongs to."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: bearer",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"sed anim pariatur aliqu\",\n      \"object\": \"thread.run\",\n      \"created_at\": 70136508,\n      \"thread_id\": \"nisi\",\n      \"assistant_id\": \"elit do ullamco\",\n      \"status\": \"queued\",\n      \"required_action\": {\n        \"type\": \"submit_tool_outputs\",\n        \"submit_tool_outputs\": {\n          \"tool_calls\": [\n            {\n              \"id\": \"est sit pariatur commodo\",\n              \"type\": \"function\",\n              \"function\": {\n                \"name\": {\n                  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"arguments\": {\n                  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n              }\n            },\n            {\n              \"id\": \"anim dolore commodo incididunt\",\n              \"type\": \"function\",\n              \"function\": {\n                \"name\": {\n                  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"arguments\": {\n                  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n              }\n            }\n          ]\n        }\n      },\n      \"last_error\": {\n        \"code\": \"rate_limit_exceeded\",\n        \"message\": \"mollit irure Lorem ipsum\"\n      },\n      \"expires_at\": -61719368,\n      \"started_at\": 95471327,\n      \"cancelled_at\": -87589238,\n      \"failed_at\": 47529609,\n      \"completed_at\": 13717460,\n      \"model\": \"quis\",\n      \"instructions\": \"quis in cupidatat ullamco eiusmod\",\n      \"metadata\": {},\n      \"usage\": {\n        \"prompt_tokens\": -6364858,\n        \"completion_tokens\": -37380399,\n        \"total_tokens\": -44125773\n      }\n    },\n    {\n      \"id\": \"inc\",\n      \"object\": \"thread.run\",\n      \"created_at\": 9773223,\n      \"thread_id\": \"ut anim aliquip aliqua reprehenderit\",\n      \"assistant_id\": \"minim eiusmod in\",\n      \"status\": \"queued\",\n      \"required_action\": {\n        \"type\": \"submit_tool_outputs\",\n        \"submit_tool_outputs\": {\n          \"tool_calls\": [\n            {\n              \"id\": \"labore voluptate quis\",\n              \"type\": \"function\",\n              \"function\": {\n                \"name\": {\n                  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"arguments\": {\n                  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n              }\n            },\n            {\n              \"id\": \"tempor culpa est\",\n              \"type\": \"function\",\n              \"function\": {\n                \"name\": {\n                  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                },\n                \"arguments\": {\n                  \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n                }\n              }\n            }\n          ]\n        }\n      },\n      \"last_error\": {\n        \"code\": \"rate_limit_exceeded\",\n        \"message\": \"Ut non sint veniam\"\n      },\n      \"expires_at\": -91883358,\n      \"started_at\": 68545830,\n      \"cancelled_at\": 6476044,\n      \"failed_at\": -3838199,\n      \"completed_at\": 57648522,\n      \"model\": \"elit mollit minim fugiat\",\n      \"instructions\": \"dolor mollit nostrud officia\",\n      \"metadata\": {},\n      \"usage\": {\n        \"prompt_tokens\": 70790784,\n        \"completion_tokens\": -59549259,\n        \"total_tokens\": -48844434\n      }\n    }\n  ],\n  \"first_id\": \"run_abc123\",\n  \"last_id\": \"run_abc456\",\n  \"has_more\": false\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/runs?limit=20&order=desc&after=<string>&before=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "0cdf79a5-6c5d-49b8-9fef-5a22a8484a3a",
                  "name": "Create a run.",
                  "request": {
                    "name": "Create a run.",
                    "description": {},
                    "url": {
                      "path": [
                        "threads",
                        ":thread_id",
                        "runs"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{thread_id}}",
                          "key": "thread_id",
                          "description": "(Required) The ID of the thread to run."
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "auth": null,
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"assistant_id\": \"{{assistant_id}}\",\n    \"model\": \"{{model}}\",\n    \"instructions\": \"{{instructions}}\",\n    \"additional_instructions\": \"{{additional_instructions}}\",\n    \"tools\": \"{{tools}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "ad0966bb-863a-4e2f-a419-23e5191f56bc",
                      "name": "OK",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "runs"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the thread to run."
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: bearer",
                              "type": "text/plain"
                            },
                            "key": "Authorization",
                            "value": "{{Authorization}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"assistant_id\": \"{{assistant_id}}\",\n    \"model\": \"{{model}}\",\n    \"instructions\": \"{{instructions}}\",\n    \"additional_instructions\": \"{{additional_instructions}}\",\n    \"tools\": \"{{tools}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"id\": \"dolor cillum\",\n  \"object\": \"thread.run\",\n  \"created_at\": -61084959,\n  \"thread_id\": \"laboris in dolor enim Ut\",\n  \"assistant_id\": \"aliquip do\",\n  \"status\": \"cancelled\",\n  \"required_action\": {\n    \"type\": \"submit_tool_outputs\",\n    \"submit_tool_outputs\": {\n      \"tool_calls\": [\n        {\n          \"id\": \"qui enim Duis sunt\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"nisi eu laborum ad nostru\",\n            \"arguments\": \"nostru\"\n          }\n        },\n        {\n          \"id\": \"ipsum sint Excepteur proident\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"non nisi\",\n            \"arguments\": \"sunt do cupidatat est Lorem\"\n          }\n        }\n      ]\n    }\n  },\n  \"last_error\": {\n    \"code\": \"server_error\",\n    \"message\": \"incididunt laboris consequat sit\"\n  },\n  \"expires_at\": 54584902,\n  \"started_at\": -50253185,\n  \"cancelled_at\": 92254847,\n  \"failed_at\": -21454252,\n  \"completed_at\": -16284670,\n  \"model\": \"reprehenderit\",\n  \"instructions\": \"esse commodo\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {},\n  \"usage\": {\n    \"prompt_tokens\": 32771483,\n    \"completion_tokens\": 5933454,\n    \"total_tokens\": -18754362\n  }\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/runs for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "640b0b6e-f774-4d78-ab9a-afccfb0531b9",
                  "name": "{run_id}",
                  "item": [
                    {
                      "id": "c663c87a-3c9c-4a41-8da1-3ea18f865ee3",
                      "name": "Retrieves a run.",
                      "request": {
                        "name": "Retrieves a run.",
                        "description": {},
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "runs",
                            ":run_id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the [thread](/docs/api-reference/threads) that was run."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{run_id}}",
                              "key": "run_id",
                              "description": "(Required) The ID of the run to retrieve."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": null
                      },
                      "response": [
                        {
                          "id": "320cd06d-9f9e-47e7-9cd6-f5e8885967c9",
                          "name": "OK",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "runs",
                                ":run_id"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the [thread](/docs/api-reference/threads) that was run."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{run_id}}",
                                  "key": "run_id",
                                  "description": "(Required) The ID of the run to retrieve."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: bearer",
                                  "type": "text/plain"
                                },
                                "key": "Authorization",
                                "value": "{{Authorization}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"id\": \"dolor cillum\",\n  \"object\": \"thread.run\",\n  \"created_at\": -61084959,\n  \"thread_id\": \"laboris in dolor enim Ut\",\n  \"assistant_id\": \"aliquip do\",\n  \"status\": \"cancelled\",\n  \"required_action\": {\n    \"type\": \"submit_tool_outputs\",\n    \"submit_tool_outputs\": {\n      \"tool_calls\": [\n        {\n          \"id\": \"qui enim Duis sunt\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"nisi eu laborum ad nostru\",\n            \"arguments\": \"nostru\"\n          }\n        },\n        {\n          \"id\": \"ipsum sint Excepteur proident\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"non nisi\",\n            \"arguments\": \"sunt do cupidatat est Lorem\"\n          }\n        }\n      ]\n    }\n  },\n  \"last_error\": {\n    \"code\": \"server_error\",\n    \"message\": \"incididunt laboris consequat sit\"\n  },\n  \"expires_at\": 54584902,\n  \"started_at\": -50253185,\n  \"cancelled_at\": 92254847,\n  \"failed_at\": -21454252,\n  \"completed_at\": -16284670,\n  \"model\": \"reprehenderit\",\n  \"instructions\": \"esse commodo\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {},\n  \"usage\": {\n    \"prompt_tokens\": 32771483,\n    \"completion_tokens\": 5933454,\n    \"total_tokens\": -18754362\n  }\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/runs/:run_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "bc847143-3e8c-498d-b81f-22f925d8dee6",
                      "name": "Modifies a run.",
                      "request": {
                        "name": "Modifies a run.",
                        "description": {},
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "runs",
                            ":run_id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the [thread](/docs/api-reference/threads) that was run."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{run_id}}",
                              "key": "run_id",
                              "description": "(Required) The ID of the run to modify."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"metadata\": \"{{metadata}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "5d95d007-863d-404c-b99c-d6bb0c527fb6",
                          "name": "OK",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "runs",
                                ":run_id"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the [thread](/docs/api-reference/threads) that was run."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{run_id}}",
                                  "key": "run_id",
                                  "description": "(Required) The ID of the run to modify."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: bearer",
                                  "type": "text/plain"
                                },
                                "key": "Authorization",
                                "value": "{{Authorization}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"metadata\": \"{{metadata}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"id\": \"dolor cillum\",\n  \"object\": \"thread.run\",\n  \"created_at\": -61084959,\n  \"thread_id\": \"laboris in dolor enim Ut\",\n  \"assistant_id\": \"aliquip do\",\n  \"status\": \"cancelled\",\n  \"required_action\": {\n    \"type\": \"submit_tool_outputs\",\n    \"submit_tool_outputs\": {\n      \"tool_calls\": [\n        {\n          \"id\": \"qui enim Duis sunt\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"nisi eu laborum ad nostru\",\n            \"arguments\": \"nostru\"\n          }\n        },\n        {\n          \"id\": \"ipsum sint Excepteur proident\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"non nisi\",\n            \"arguments\": \"sunt do cupidatat est Lorem\"\n          }\n        }\n      ]\n    }\n  },\n  \"last_error\": {\n    \"code\": \"server_error\",\n    \"message\": \"incididunt laboris consequat sit\"\n  },\n  \"expires_at\": 54584902,\n  \"started_at\": -50253185,\n  \"cancelled_at\": 92254847,\n  \"failed_at\": -21454252,\n  \"completed_at\": -16284670,\n  \"model\": \"reprehenderit\",\n  \"instructions\": \"esse commodo\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {},\n  \"usage\": {\n    \"prompt_tokens\": 32771483,\n    \"completion_tokens\": 5933454,\n    \"total_tokens\": -18754362\n  }\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/runs/:run_id for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "f03f02b7-6b70-49a2-bfdd-a944ae5f3bdf",
                      "name": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
                      "request": {
                        "name": "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n",
                        "description": {},
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "runs",
                            ":run_id",
                            "submit_tool_outputs"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the [thread](/docs/api-reference/threads) to which this run belongs."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{run_id}}",
                              "key": "run_id",
                              "description": "(Required) The ID of the run that requires the tool output submission."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": null,
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tool_outputs\": \"{{tool_outputs}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "c9f1e6e0-882d-4091-a803-b8555cb737da",
                          "name": "OK",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "runs",
                                ":run_id",
                                "submit_tool_outputs"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the [thread](/docs/api-reference/threads) to which this run belongs."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{run_id}}",
                                  "key": "run_id",
                                  "description": "(Required) The ID of the run that requires the tool output submission."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: bearer",
                                  "type": "text/plain"
                                },
                                "key": "Authorization",
                                "value": "{{Authorization}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"tool_outputs\": \"{{tool_outputs}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"id\": \"dolor cillum\",\n  \"object\": \"thread.run\",\n  \"created_at\": -61084959,\n  \"thread_id\": \"laboris in dolor enim Ut\",\n  \"assistant_id\": \"aliquip do\",\n  \"status\": \"cancelled\",\n  \"required_action\": {\n    \"type\": \"submit_tool_outputs\",\n    \"submit_tool_outputs\": {\n      \"tool_calls\": [\n        {\n          \"id\": \"qui enim Duis sunt\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"nisi eu laborum ad nostru\",\n            \"arguments\": \"nostru\"\n          }\n        },\n        {\n          \"id\": \"ipsum sint Excepteur proident\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"non nisi\",\n            \"arguments\": \"sunt do cupidatat est Lorem\"\n          }\n        }\n      ]\n    }\n  },\n  \"last_error\": {\n    \"code\": \"server_error\",\n    \"message\": \"incididunt laboris consequat sit\"\n  },\n  \"expires_at\": 54584902,\n  \"started_at\": -50253185,\n  \"cancelled_at\": 92254847,\n  \"failed_at\": -21454252,\n  \"completed_at\": -16284670,\n  \"model\": \"reprehenderit\",\n  \"instructions\": \"esse commodo\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {},\n  \"usage\": {\n    \"prompt_tokens\": 32771483,\n    \"completion_tokens\": 5933454,\n    \"total_tokens\": -18754362\n  }\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/runs/:run_id/submit_tool_outputs for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "546b620f-20fa-4ecf-ba78-04e919f8c2ac",
                      "name": "Cancels a run that is `in_progress`.",
                      "request": {
                        "name": "Cancels a run that is `in_progress`.",
                        "description": {},
                        "url": {
                          "path": [
                            "threads",
                            ":thread_id",
                            "runs",
                            ":run_id",
                            "cancel"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{thread_id}}",
                              "key": "thread_id",
                              "description": "(Required) The ID of the thread to which this run belongs."
                            },
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{run_id}}",
                              "key": "run_id",
                              "description": "(Required) The ID of the run to cancel."
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": null
                      },
                      "response": [
                        {
                          "id": "9fdba2e3-8900-4787-b3cc-8b260ec978a2",
                          "name": "OK",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "runs",
                                ":run_id",
                                "cancel"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the thread to which this run belongs."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{run_id}}",
                                  "key": "run_id",
                                  "description": "(Required) The ID of the run to cancel."
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: bearer",
                                  "type": "text/plain"
                                },
                                "key": "Authorization",
                                "value": "{{Authorization}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"id\": \"dolor cillum\",\n  \"object\": \"thread.run\",\n  \"created_at\": -61084959,\n  \"thread_id\": \"laboris in dolor enim Ut\",\n  \"assistant_id\": \"aliquip do\",\n  \"status\": \"cancelled\",\n  \"required_action\": {\n    \"type\": \"submit_tool_outputs\",\n    \"submit_tool_outputs\": {\n      \"tool_calls\": [\n        {\n          \"id\": \"qui enim Duis sunt\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"nisi eu laborum ad nostru\",\n            \"arguments\": \"nostru\"\n          }\n        },\n        {\n          \"id\": \"ipsum sint Excepteur proident\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"non nisi\",\n            \"arguments\": \"sunt do cupidatat est Lorem\"\n          }\n        }\n      ]\n    }\n  },\n  \"last_error\": {\n    \"code\": \"server_error\",\n    \"message\": \"incididunt laboris consequat sit\"\n  },\n  \"expires_at\": 54584902,\n  \"started_at\": -50253185,\n  \"cancelled_at\": 92254847,\n  \"failed_at\": -21454252,\n  \"completed_at\": -16284670,\n  \"model\": \"reprehenderit\",\n  \"instructions\": \"esse commodo\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {},\n  \"usage\": {\n    \"prompt_tokens\": 32771483,\n    \"completion_tokens\": 5933454,\n    \"total_tokens\": -18754362\n  }\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/runs/:run_id/cancel for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "0783396c-ff94-46e7-9234-d39257aa0035",
                      "name": "steps",
                      "item": [
                        {
                          "id": "242d5fcb-b317-437c-9016-f121e8beab80",
                          "name": "Returns a list of run steps belonging to a run.",
                          "request": {
                            "name": "Returns a list of run steps belonging to a run.",
                            "description": {},
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "runs",
                                ":run_id",
                                "steps"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "disabled": false,
                                  "key": "limit",
                                  "value": "{{limit}}",
                                  "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
                                },
                                {
                                  "disabled": false,
                                  "key": "order",
                                  "value": "{{order}}",
                                  "description": "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
                                },
                                {
                                  "disabled": false,
                                  "key": "after",
                                  "value": "{{after}}",
                                  "description": "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
                                },
                                {
                                  "disabled": false,
                                  "key": "before",
                                  "value": "{{before}}",
                                  "description": "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the thread the run and run steps belong to."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{run_id}}",
                                  "key": "run_id",
                                  "description": "(Required) The ID of the run the run steps belong to."
                                }
                              ]
                            },
                            "header": [
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "auth": null
                          },
                          "response": [
                            {
                              "id": "0ed4919f-3ae3-4282-bfdc-a3d6546b9ccf",
                              "name": "OK",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "threads",
                                    ":thread_id",
                                    "runs",
                                    ":run_id",
                                    "steps"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [
                                    {
                                      "key": "limit",
                                      "value": "{{limit}}"
                                    },
                                    {
                                      "key": "order",
                                      "value": "{{order}}"
                                    },
                                    {
                                      "key": "after",
                                      "value": "{{after}}"
                                    },
                                    {
                                      "key": "before",
                                      "value": "{{before}}"
                                    }
                                  ],
                                  "variable": [
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{thread_id}}",
                                      "key": "thread_id",
                                      "description": "(Required) The ID of the thread the run and run steps belong to."
                                    },
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{run_id}}",
                                      "key": "run_id",
                                      "description": "(Required) The ID of the run the run steps belong to."
                                    }
                                  ]
                                },
                                "header": [
                                  {
                                    "description": {
                                      "content": "Added as a part of security scheme: bearer",
                                      "type": "text/plain"
                                    },
                                    "key": "Authorization",
                                    "value": "{{Authorization}}"
                                  },
                                  {
                                    "key": "Accept",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "GET",
                                "body": {}
                              },
                              "status": "OK",
                              "code": 200,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"id nulla officia\",\n      \"object\": \"thread.run.step\",\n      \"created_at\": -9986003,\n      \"assistant_id\": \"adipisicing id fugiat\",\n      \"thread_id\": \"laboris\",\n      \"run_id\": \"deserunt nisi do ut\",\n      \"type\": \"message_creation\",\n      \"status\": \"expired\",\n      \"step_details\": {\n        \"type\": \"message_creation\",\n        \"message_creation\": {\n          \"message_id\": \"occaecat ex ea fugiat\"\n        }\n      },\n      \"last_error\": {\n        \"code\": \"server_error\",\n        \"message\": \"dolore sunt aliquip\"\n      },\n      \"expired_at\": 64011782,\n      \"cancelled_at\": 58422427,\n      \"failed_at\": 65259151,\n      \"completed_at\": 13432519,\n      \"metadata\": {},\n      \"usage\": {\n        \"prompt_tokens\": 8077314,\n        \"completion_tokens\": 25562510,\n        \"total_tokens\": 89774145\n      }\n    },\n    {\n      \"id\": \"ea officia fugiat non\",\n      \"object\": \"thread.run.step\",\n      \"created_at\": -28257894,\n      \"assistant_id\": \"do commodo sint consectetur\",\n      \"thread_id\": \"cillum si\",\n      \"run_id\": \"incididunt fugiat qui\",\n      \"type\": \"message_creation\",\n      \"status\": \"cancelled\",\n      \"step_details\": {\n        \"type\": \"message_creation\",\n        \"message_creation\": {\n          \"message_id\": \"ullamco\"\n        }\n      },\n      \"last_error\": {\n        \"code\": \"server_error\",\n        \"message\": \"amet magna\"\n      },\n      \"expired_at\": 18203415,\n      \"cancelled_at\": -8381141,\n      \"failed_at\": -88184115,\n      \"completed_at\": 91677063,\n      \"metadata\": {},\n      \"usage\": {\n        \"prompt_tokens\": -78366032,\n        \"completion_tokens\": -21621943,\n        \"total_tokens\": -64266675\n      }\n    }\n  ],\n  \"first_id\": \"step_abc123\",\n  \"last_id\": \"step_abc456\",\n  \"has_more\": false\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/runs/:run_id/steps?limit=20&order=desc&after=<string>&before=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "protocolProfileBehavior": {
                            "disableBodyPruning": true
                          }
                        },
                        {
                          "id": "cdfe6787-e08b-4f3d-b61d-6c6f5fc469d6",
                          "name": "Retrieves a run step.",
                          "request": {
                            "name": "Retrieves a run step.",
                            "description": {},
                            "url": {
                              "path": [
                                "threads",
                                ":thread_id",
                                "runs",
                                ":run_id",
                                "steps",
                                ":step_id"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{thread_id}}",
                                  "key": "thread_id",
                                  "description": "(Required) The ID of the thread to which the run and run step belongs."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{run_id}}",
                                  "key": "run_id",
                                  "description": "(Required) The ID of the run to which the run step belongs."
                                },
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{step_id}}",
                                  "key": "step_id",
                                  "description": "(Required) The ID of the run step to retrieve."
                                }
                              ]
                            },
                            "header": [
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "auth": null
                          },
                          "response": [
                            {
                              "id": "4353d754-5a4b-4b75-a0cb-2828462825d7",
                              "name": "OK",
                              "originalRequest": {
                                "url": {
                                  "path": [
                                    "threads",
                                    ":thread_id",
                                    "runs",
                                    ":run_id",
                                    "steps",
                                    ":step_id"
                                  ],
                                  "host": [
                                    "{{baseUrl}}"
                                  ],
                                  "query": [],
                                  "variable": [
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{thread_id}}",
                                      "key": "thread_id",
                                      "description": "(Required) The ID of the thread to which the run and run step belongs."
                                    },
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{run_id}}",
                                      "key": "run_id",
                                      "description": "(Required) The ID of the run to which the run step belongs."
                                    },
                                    {
                                      "disabled": false,
                                      "type": "any",
                                      "value": "{{step_id}}",
                                      "key": "step_id",
                                      "description": "(Required) The ID of the run step to retrieve."
                                    }
                                  ]
                                },
                                "header": [
                                  {
                                    "description": {
                                      "content": "Added as a part of security scheme: bearer",
                                      "type": "text/plain"
                                    },
                                    "key": "Authorization",
                                    "value": "{{Authorization}}"
                                  },
                                  {
                                    "key": "Accept",
                                    "value": "application/json"
                                  }
                                ],
                                "method": "GET",
                                "body": {}
                              },
                              "status": "OK",
                              "code": 200,
                              "header": [
                                {
                                  "key": "Content-Type",
                                  "value": "application/json"
                                }
                              ],
                              "body": "{\n  \"id\": \"reprehenderit\",\n  \"object\": \"thread.run.step\",\n  \"created_at\": 50884178,\n  \"assistant_id\": \"qui eiusmod adipisicing est\",\n  \"thread_id\": \"dolore anim qui\",\n  \"run_id\": \"qui id\",\n  \"type\": \"tool_calls\",\n  \"status\": \"completed\",\n  \"step_details\": {\n    \"type\": \"message_creation\",\n    \"message_creation\": {\n      \"message_id\": \"sint sit eiusmod elit nisi\"\n    }\n  },\n  \"last_error\": {\n    \"code\": \"rate_limit_exceeded\",\n    \"message\": \"Excepteur minim eu enim culpa\"\n  },\n  \"expired_at\": 27183812,\n  \"cancelled_at\": -48011215,\n  \"failed_at\": 84901619,\n  \"completed_at\": 74042674,\n  \"metadata\": {},\n  \"usage\": {\n    \"prompt_tokens\": -66602541,\n    \"completion_tokens\": -47738625,\n    \"total_tokens\": -63549825\n  }\n}",
                              "cookie": [],
                              "_postman_previewlanguage": "json"
                            }
                          ],
                          "event": [
                            {
                              "listen": "test",
                              "script": {
                                "exec": [
                                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/:thread_id/runs/:run_id/steps/:step_id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                                ],
                                "type": "text/javascript"
                              }
                            }
                          ],
                          "protocolProfileBehavior": {
                            "disableBodyPruning": true
                          }
                        }
                      ],
                      "event": []
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "0d319a36-e6c5-418c-a7ab-e661d4dd2fa1",
          "name": "Create a thread and run it in one request.",
          "request": {
            "name": "Create a thread and run it in one request.",
            "description": {},
            "url": {
              "path": [
                "threads",
                "runs"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"assistant_id\": \"{{assistant_id}}\",\n    \"thread\": {\n        \"messages\": \"{{messages}}\",\n        \"metadata\": \"{{metadata}}\"\n    },\n    \"model\": \"{{model}}\",\n    \"instructions\": \"{{instructions}}\",\n    \"tools\": \"{{tools}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "e25d8f49-ac54-4cca-94dd-fc96d3ba4612",
              "name": "OK",
              "originalRequest": {
                "url": {
                  "path": [
                    "threads",
                    "runs"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: bearer",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": "{{Authorization}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"assistant_id\": \"{{assistant_id}}\",\n    \"thread\": {\n        \"messages\": \"{{messages}}\",\n        \"metadata\": \"{{metadata}}\"\n    },\n    \"model\": \"{{model}}\",\n    \"instructions\": \"{{instructions}}\",\n    \"tools\": \"{{tools}}\",\n    \"metadata\": \"{{metadata}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"id\": \"dolor cillum\",\n  \"object\": \"thread.run\",\n  \"created_at\": -61084959,\n  \"thread_id\": \"laboris in dolor enim Ut\",\n  \"assistant_id\": \"aliquip do\",\n  \"status\": \"cancelled\",\n  \"required_action\": {\n    \"type\": \"submit_tool_outputs\",\n    \"submit_tool_outputs\": {\n      \"tool_calls\": [\n        {\n          \"id\": \"qui enim Duis sunt\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"nisi eu laborum ad nostru\",\n            \"arguments\": \"nostru\"\n          }\n        },\n        {\n          \"id\": \"ipsum sint Excepteur proident\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"non nisi\",\n            \"arguments\": \"sunt do cupidatat est Lorem\"\n          }\n        }\n      ]\n    }\n  },\n  \"last_error\": {\n    \"code\": \"server_error\",\n    \"message\": \"incididunt laboris consequat sit\"\n  },\n  \"expires_at\": 54584902,\n  \"started_at\": -50253185,\n  \"cancelled_at\": 92254847,\n  \"failed_at\": -21454252,\n  \"completed_at\": -16284670,\n  \"model\": \"reprehenderit\",\n  \"instructions\": \"esse commodo\",\n  \"tools\": [],\n  \"file_ids\": [],\n  \"metadata\": {},\n  \"usage\": {\n    \"prompt_tokens\": 32771483,\n    \"completion_tokens\": 5933454,\n    \"total_tokens\": -18754362\n  }\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test opensource-api using AI Type Azure Open AI and AI Model roost-gpt4-32k\n\n\nTest generated for /threads/runs for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"OK\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(responseData[0], `object`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `object` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`object`)){\n          if(pm.expect(_.get(pm.response.json(), `object`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `object`, 200)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('object to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"object\", \"\")).to.include.oneOf([\"thread\"]);\n        })\n\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `created_at` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`created_at`)){\n                  if(pm.expect(_.get(responseData[0], `created_at`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `created_at`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `created_at` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`created_at`)){\n                if(pm.expect(_.get(responseData, `created_at`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `created_at`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(responseData[0], `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `metadata` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`metadata`)){\n          if(pm.expect(_.get(pm.response.json(), `metadata`, 200)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `metadata`, 200)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://api.openai.com/v1",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{bearerToken}}"
      }
    ]
  },
  "info": {
    "_postman_id": "8b5a1ee8-962a-44f2-a1ae-8ef466949b67",
    "name": "OpenAI API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.\n\nContact Support:\n Name: OpenAI Support",
      "type": "text/plain"
    }
  }
}